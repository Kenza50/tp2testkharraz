<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ai.zencoder.plugin.chat.state-dedicated">
    <option name="activeChatId" value="40b64d6b-4740-48d9-833e-533a58214d1c" />
    <option name="chatSessions" value="{&quot;f7a43b3c-5acc-4747-9b5c-8d5e0e17e206&quot;:{&quot;id&quot;:&quot;f7a43b3c-5acc-4747-9b5c-8d5e0e17e206&quot;,&quot;createdAt&quot;:1761843447196,&quot;updatedAt&quot;:1761843452442,&quot;title&quot;:&quot;Embedding Model Similarity Analysis&quot;,&quot;messages&quot;:[{&quot;id&quot;:&quot;11177297-c79c-459d-a46d-846140847d07&quot;,&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Le programme utilise un modèle d'embeddings pour générer 2 embeddings de 2 phrases et ensuite calculer leur similarité par la métrique du cosinus.&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Une des difficultés est de trouver le bon nom de modèle pour les embeddings. La liste des noms de modèles pour Gemini peut être obtenue en tapant cet URL dans un navigateur : https://generativelanguage.googleapis.com/v1beta/models?key=AIzuuyDTjkuPHjBY... (collez ici votre clé Gemini). Attention, le nom du modèle à mettre dans le code est le nom qui est après \&quot;models/\&quot; dans la liste des modèles. Pour faire le meilleur choix, vous pouvez faire une recherche sur le Web, par exemple sur https://huggingface.co/spaces/mteb/leaderboard, aller sur le site de l'API Gemini, ou demander à une IA.&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Ensuite, allez voir l'interface EmbeddingModel et la classe GoogleAiEmbeddingModel dans la javadoc de LangChain4j. Utilisez le design pattern \&quot;builder\&quot; pour créer une instance de GoogleAiEmbeddingModel. Pour le type de tâche, choisissez TaskType.SEMANTIC_SIMILARITY puiqu'on veut calculer une similarité. Pour la dimension des vecteurs d'embeddings, choisissez par exemple 300. Pour la durée du timeout, utilisez la classe Duration du JDK ; essayez 100 ms et augmentez si ça ne suffit pas.&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Donnez plusieurs couples de phrases, similaires ou pas, pour voir la similarité (plus elle est proche de 1, meilleur elle est).&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Pour récupérer les embeddings à partir des réponses du modèle d'embeddings, utilisez la méthode content().&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Pour calculer la similarité, utilisez la classe CosineSimilarity (cherchez dans la javadoc ou le support de cours)&quot;}],&quot;context&quot;:{&quot;codebaseEnabled&quot;:true},&quot;createdAt&quot;:1761843447211,&quot;isInternal&quot;:false,&quot;rawContent&quot;:{&quot;type&quot;:&quot;doc&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Le programme utilise un modèle d'embeddings pour générer 2 embeddings de 2 phrases et ensuite calculer leur similarité par la métrique du cosinus.&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Une des difficultés est de trouver le bon nom de modèle pour les embeddings. La liste des noms de modèles pour Gemini peut être obtenue en tapant cet URL dans un navigateur : https://generativelanguage.googleapis.com/v1beta/models?key=AIzuuyDTjkuPHjBY... (collez ici votre clé Gemini). Attention, le nom du modèle à mettre dans le code est le nom qui est après \&quot;models/\&quot; dans la liste des modèles. Pour faire le meilleur choix, vous pouvez faire une recherche sur le Web, par exemple sur https://huggingface.co/spaces/mteb/leaderboard, aller sur le site de l'API Gemini, ou demander à une IA.&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Ensuite, allez voir l'interface EmbeddingModel et la classe GoogleAiEmbeddingModel dans la javadoc de LangChain4j. Utilisez le design pattern \&quot;builder\&quot; pour créer une instance de GoogleAiEmbeddingModel. Pour le type de tâche, choisissez TaskType.SEMANTIC_SIMILARITY puiqu'on veut calculer une similarité. Pour la dimension des vecteurs d'embeddings, choisissez par exemple 300. Pour la durée du timeout, utilisez la classe Duration du JDK ; essayez 100 ms et augmentez si ça ne suffit pas.&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Donnez plusieurs couples de phrases, similaires ou pas, pour voir la similarité (plus elle est proche de 1, meilleur elle est).&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Pour récupérer les embeddings à partir des réponses du modèle d'embeddings, utilisez la méthode content().&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Pour calculer la similarité, utilisez la classe CosineSimilarity (cherchez dans la javadoc ou le support de cours)&quot;}]}]},&quot;autoAppliedRules&quot;:[]},{&quot;id&quot;:&quot;21d9b189-fcca-4420-b327-62c1f0d6f23f&quot;,&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;thought&quot;,&quot;text&quot;:&quot;**Preparing to check repository rules file**&quot;},{&quot;type&quot;:&quot;toolCall&quot;,&quot;toolCallId&quot;:&quot;call_I0W9WH0dqxZ4LcEax46Ww0j9&quot;,&quot;title&quot;:&quot;&quot;,&quot;statusText&quot;:&quot;File not found&quot;,&quot;status&quot;:&quot;WARNING&quot;,&quot;isHidden&quot;:false},{&quot;type&quot;:&quot;thought&quot;,&quot;text&quot;:&quot;**Noting missing file issue**&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;# Préparation\n\nJe n’ai pas trouvé le fichier `.zencoder/rules/repo.md` dans le dépôt (`C:/Users/ProBook/Documents/Projets IntelliJ IDEA/AI/TPs Casablanca/tp2testkharraz`). Si vous souhaitez, je peux le créer automatiquement ; cela aide souvent à avoir un résumé du projet et à améliorer la qualité des réponses. Faites-moi signe si vous voulez que je m’en charge.&quot;}],&quot;context&quot;:{&quot;author&quot;:&quot;Code agent&quot;,&quot;operationId&quot;:&quot;d930ef1b-123c-437b-b9d9-e82bbefaa37c&quot;,&quot;usageStatistics&quot;:{&quot;llmCallsUsedForAnswer&quot;:2.0,&quot;llmCallsUsedTotal&quot;:18.0,&quot;llmCallsLimit&quot;:30.0,&quot;limitRenewalMillisecondTimestamp&quot;:1761852099013}},&quot;createdAt&quot;:1761843452442,&quot;isInternal&quot;:false}],&quot;isAgent&quot;:true,&quot;isNameGenerated&quot;:true,&quot;isCustomAgent&quot;:false,&quot;isUnitTestsAgent&quot;:false,&quot;isE2EAgent&quot;:false,&quot;isQnaAgent&quot;:false,&quot;isRepoInfoAgent&quot;:false,&quot;isClaudeCode&quot;:false,&quot;isZencoderCli&quot;:false,&quot;autoApply&quot;:true,&quot;model&quot;:&quot;default&quot;},&quot;afb7bb68-217b-4162-9aab-d0302df5fcd2&quot;:{&quot;id&quot;:&quot;afb7bb68-217b-4162-9aab-d0302df5fcd2&quot;,&quot;createdAt&quot;:1761839839403,&quot;updatedAt&quot;:1761840444998,&quot;title&quot;:&quot;Structure Code Test1&quot;,&quot;messages&quot;:[{&quot;id&quot;:&quot;5f9e0fa1-e87f-42a7-a6a6-915e461ad2a3&quot;,&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;structure moi le code de test1&quot;}],&quot;context&quot;:{&quot;currentFile&quot;:{&quot;path&quot;:&quot;src/main/java/ma/emsi/kharraz/Test1.java&quot;,&quot;fsPath&quot;:&quot;C:/Users/ProBook/Documents/Projets IntelliJ IDEA/AI/TPs Casablanca/tp2testkharraz/src/main/java/ma/emsi/kharraz/Test1.java&quot;,&quot;sources&quot;:[&quot;opened_tab&quot;],&quot;content&quot;:&quot;package ma.emsi.kharraz;\n\nimport dev.langchain4j.model.chat.ChatModel;\nimport dev.langchain4j.model.googleai.GoogleAiGeminiChatModel;\n\npublic class Test1 {\n    public static void main(String[] args) {\n        String cle = System.getenv(\&quot;GEMINI_KEY\&quot;);// Création du modèle\n        ChatModel modele = GoogleAiGeminiChatModel.builder().apiKey(cle).modelName(\&quot;gemini-2.5-flash\&quot;).build();\n// Pose une question au modèleString reponse = modele.chat(\&quot;... ?\&quot;);System.out.println(reponse);\n    }\n}\n&quot;,&quot;language&quot;:&quot;java&quot;},&quot;codebaseEnabled&quot;:true},&quot;createdAt&quot;:1761839839406,&quot;isInternal&quot;:false,&quot;rawContent&quot;:{&quot;type&quot;:&quot;doc&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;structure moi le code de test1&quot;}]}]},&quot;autoAppliedRules&quot;:[]},{&quot;id&quot;:&quot;d481383b-2cfb-4037-9aa5-1933ad0bd5be&quot;,&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;thought&quot;,&quot;text&quot;:&quot;**Preparing to access repository guidelines**&quot;},{&quot;type&quot;:&quot;toolCall&quot;,&quot;toolCallId&quot;:&quot;call_WlTsTNUxkODcIjMhxEJk4cBw&quot;,&quot;title&quot;:&quot;&quot;,&quot;statusText&quot;:&quot;File not found&quot;,&quot;status&quot;:&quot;WARNING&quot;,&quot;isHidden&quot;:false},{&quot;type&quot;:&quot;thought&quot;,&quot;text&quot;:&quot;**Planning test1 code restructuring**&quot;},{&quot;type&quot;:&quot;toolCall&quot;,&quot;toolCallId&quot;:&quot;call_YPAhoxsQuanEWUTVflpUb2iB&quot;,&quot;statusText&quot;:&quot;Viewed file (lines 1:8)&quot;,&quot;status&quot;:&quot;SUCCESS&quot;,&quot;context&quot;:{&quot;files&quot;:[{&quot;path&quot;:&quot;src/main/java/ma/emsi/kharraz/Test1.java&quot;,&quot;fsPath&quot;:&quot;C:/Users/ProBook/Documents/Projets IntelliJ IDEA/AI/TPs Casablanca/tp2testkharraz/src/main/java/ma/emsi/kharraz/Test1.java&quot;}]},&quot;isHidden&quot;:false},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;# Proposition de structure pour `Test1`\n\nComme demandé, voici une structure claire et prête à compléter pour la classe `Test1`. Elle comprend :\n\n1. La gestion de la clé d’API via une constante.\n2. Une méthode `main` par organisée étapes commentées.\n3. Un exemple de méthode util encapsitaire pouruler la création du modèle (optionnel, mais utile pour clarifier le flux).\n\n```java\npackage masi.em.kharraz;\n\nimport dev.langchain4j.model.chat.ChatModel;\nimport dev.langchain4j.model.googleai.GoogleAiGeminiChatModel;\n\npublic class Test1 {\n\n    private static final String GEMINI_KEY_ENV = \&quot;GEMINI_KEY\&quot;;\n\n    public static void main(String[] args) {\n        // 1. Récupérer la clé d'API depuis les variables d'environnement\n        String apiKey = System.getenv(GEMINI_KEY_ENV);\n        if (apiKey == null || apiKey.isBlank()) {\n            System.err.println(\&quot;La clé d'API Google Gemini est introuvable. Définissez la variable d'environnement 'GEMINI_KEY'.           \&quot;);\n return;\n        }\n\n        // 2. Créer et configurer le modèle Gemini\n        ChatModel geminiModel = buildGeminiModel(apiKey);\n\n        // 3. Préparer la requête à envoyer\n        String question = \&quot;Posez votre question ici\&quot;;\n\n        // 4. Interroger le modèle et récupérer la réponse\n        String response = geminiModel.chat(question);\n\n        // 5. Afficher la réponse\n        System.out.println(\&quot;Réponse du modèle : \&quot; + response);\n    }\n\n    private static ChatModel buildGeminiModel(String apiKey) {\n        return GoogleAiGeminiChatModel.builder()\n                .apiKey(apiKey)\n                .modelName(\&quot;gemini-2.5-flash\&quot;) // Ajustable selon le modèle souhaité\n                .build();\n    }\n}\n```\n\nVous pouvez désormais :\n- Remplacer `question` par la requête souhaitée.\n- Ajuster `modelName` si vous utilisez une version différente du modèle.\n- Ajouter la gestion d’erreurs ou la mise en forme des réponses selon vos besoins.\n\nBesoin d’une version plus simple ou d’un exemple de requête réelle ? Indiquez-moi ce que vous faire voulez et je vous aiderai à adapter ce squelette.&quot;}],&quot;context&quot;:{&quot;author&quot;:&quot;Code agent&quot;,&quot;operationId&quot;:&quot;407c4205-9169-4311-a4a7-77a569d6051b&quot;,&quot;usageStatistics&quot;:{&quot;llmCallsUsedForAnswer&quot;:3.0,&quot;llmCallsUsedTotal&quot;:7.0,&quot;llmCallsLimit&quot;:30.0,&quot;limitRenewalMillisecondTimestamp&quot;:1761852098974}},&quot;createdAt&quot;:1761839854503,&quot;isInternal&quot;:false},{&quot;id&quot;:&quot;584b7489-1656-4bcf-9865-c3026c50be85&quot;,&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;structure bien le code&quot;}],&quot;context&quot;:{&quot;currentFile&quot;:{&quot;path&quot;:&quot;src/main/java/ma/emsi/kharraz/Test1.java&quot;,&quot;fsPath&quot;:&quot;C:/Users/ProBook/Documents/Projets IntelliJ IDEA/AI/TPs Casablanca/tp2testkharraz/src/main/java/ma/emsi/kharraz/Test1.java&quot;,&quot;sources&quot;:[&quot;opened_tab&quot;],&quot;content&quot;:&quot;package ma.emsi.kharraz;\n\nimport dev.langchain4j.model.chat.ChatModel;\nimport dev.langchain4j.model.googleai.GoogleAiGeminiChatModel;\n\npublic class Test1 {\n    public static void main(String[] args) {\n        String cle = System.getenv(\&quot;GEMINI_KEY\&quot;);// Création du modèle\n        ChatModel modele = GoogleAiGeminiChatModel.builder().apiKey(cle).modelName(\&quot;gemini-2.5-flash\&quot;).build();\n// Pose une question au modèleString reponse = modele.chat(\&quot;... ?\&quot;);System.out.println(reponse);\n    }\n}\n&quot;,&quot;language&quot;:&quot;java&quot;},&quot;codebaseEnabled&quot;:true},&quot;createdAt&quot;:1761840049756,&quot;isInternal&quot;:false,&quot;rawContent&quot;:{&quot;type&quot;:&quot;doc&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;structure bien le code &quot;}]}]},&quot;autoAppliedRules&quot;:[]},{&quot;id&quot;:&quot;4b7ffbf2-c95f-42aa-8dbe-d5892218531e&quot;,&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;thought&quot;,&quot;text&quot;:&quot;**Preparing to restructure main class code**&quot;},{&quot;type&quot;:&quot;toolCall&quot;,&quot;toolCallId&quot;:&quot;call_7nZROdxYsbLi4w0YZlX17pBF&quot;,&quot;statusText&quot;:&quot;Change generated&quot;,&quot;status&quot;:&quot;SUCCESS&quot;,&quot;context&quot;:{&quot;files&quot;:[{&quot;path&quot;:&quot;src/main/java/ma/emsi/kharraz/Test1.java&quot;,&quot;fsPath&quot;:&quot;C:/Users/ProBook/Documents/Projets IntelliJ IDEA/AI/TPs Casablanca/tp2testkharraz/src/main/java/ma/emsi/kharraz/Test1.java&quot;}]},&quot;isHidden&quot;:false},{&quot;type&quot;:&quot;codeHunk&quot;,&quot;lineBasedDiff&quot;:&quot;--- C:/Users/ProBook/Documents/Projets IntelliJ IDEA/AI/TPs Casablanca/tp2testkharraz/src/main/java/ma/emsi/kharraz/Test1.java\n+++ C:/Users/ProBook/Documents/Projets IntelliJ IDEA/AI/TPs Casablanca/tp2testkharraz/src/main/java/ma/emsi/kharraz/Test1.java\n@@ -1,7 +1,37 @@\n package ma.emsi.kharraz;\n \n+import dev.langchain4j.model.chat.ChatModel;\n+import dev.langchain4j.model.googleai.GoogleAiGeminiChatModel;\n+\n public class Test1 {\n+\n+    private static final String GEMINI_KEY_ENV = \&quot;GEMINI_KEY\&quot;;\n+\n     public static void main(String[] args) {\n-        \n+        // 1. Récupérer la clé d'API depuis les variables d'environnement\n+        String apiKey = System.getenv(GEMINI_KEY_ENV);\n+        if (apiKey == null || apiKey.isBlank()) {\n+            System.err.println(\&quot;La clé d'API Google Gemini est introuvable. Définissez la variable d'environnement 'GEMINI_KEY'.\&quot;);\n+            return;\n+        }\n+\n+        // 2. Créer et configurer le modèle Gemini\n+        ChatModel geminiModel = buildGeminiModel(apiKey);\n+\n+        // 3. Préparer la requête à envoyer au modèle\n+        String question = \&quot;Posez votre question ici\&quot;;\n+\n+        // 4. Interroger le modèle et récupérer la réponse\n+        String response = geminiModel.chat(question);\n+\n+        // 5. Afficher la réponse\n+        System.out.println(\&quot;Réponse du modèle : \&quot; + response);\n+    }\n+\n+    private static ChatModel buildGeminiModel(String apiKey) {\n+        return GoogleAiGeminiChatModel.builder()\n+                .apiKey(apiKey)\n+                .modelName(\&quot;gemini-2.5-flash\&quot;)\n+                .build();\n     }\n }&quot;,&quot;refToolCallId&quot;:&quot;call_7nZROdxYsbLi4w0YZlX17pBF&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;# Code restructuré pour `Test1`\n\nLe fichier `Test1.java` est maintenant organisé de façon claire et prête à l’emploi :\n\n1. **Constante pour la clé d’API** afin d’éviter les chaînes de caractères magiques.\n2. **Validation de la clé d’API** pour prévenir les erreurs d’exécution.\n3. **Création du modèle** encapsulée dans une méthode dédiée.\n4. **Séquence logique claire** : récupération de la clé → création du modèle → question → réponse.\n\n```java\npackage ma.emsi.kharraz;\n\nimport dev.langchain4j.model.chat.ChatModel;\nimport dev.langchain4j.model.googleai.GoogleAiGeminiChatModel;\n\npublic class Test1 {\n\n    private static final String GEMINI_KEY_ENV = \&quot;GEMINI_KEY\&quot;;\n\n    public static void main(String[] args) {\n        // 1. Récupérer la clé d'API depuis les variables d'environnement\n        String apiKey = System.getenv(GEMINI_KEY_ENV);\n        if (apiKey == null || apiKey.isBlank()) {\n            System.err.println(\&quot;La clé d'API Google Gemini est introuvable. Définissez la variable d'environnement 'GEMINI_KEY'.\&quot;);\n            return;\n        }\n\n        // 2. Créer et configurer le modèle Gemini\n        ChatModel geminiModel = buildGeminiModel(apiKey);\n\n        // 3. Préparer la requête à envoyer au modèle\n        String question = \&quot;Posez votre question ici\&quot;;\n\n        // 4. Interroger le modèle et récupérer la réponse\n        String response = geminiModel.chat(question);\n\n        // 5. Afficher la réponse\n        System.out.println(\&quot;Réponse du modèle : \&quot; + response);\n    }\n\n    private static ChatModel buildGeminiModel(String apiKey) {\n        return GoogleAiGeminiChatModel.builder()\n                .apiKey(apiKey)\n                .modelName(\&quot;gemini-2.5-flash\&quot;)\n                .build();\n    }\n}\n```\n\nSi vous souhaitez ajouter la gestion d’exceptions, paramétrer la température du modèle ou intégrer des logs supplémentaires, faites-moi savoir et je vous aiderai à ajuster cette base.&quot;},{&quot;type&quot;:&quot;codePatch&quot;,&quot;diffs&quot;:[{&quot;path&quot;:&quot;src/main/java/ma/emsi/kharraz/Test1.java&quot;,&quot;fsPath&quot;:&quot;C:/Users/ProBook/Documents/Projets IntelliJ IDEA/AI/TPs Casablanca/tp2testkharraz/src/main/java/ma/emsi/kharraz/Test1.java&quot;,&quot;patch&quot;:&quot;@@ -25,84 +25,1275 @@\n %0D%0A%0D%0A\n-public class Test1 %7B%0D%0A    public static void main(String%5B%5D args) %7B%0D%0A        \n+import dev.langchain4j.model.chat.ChatModel;%0D%0Aimport dev.langchain4j.model.googleai.GoogleAiGeminiChatModel;%0D%0A%0D%0Apublic class Test1 %7B%0D%0A%0D%0A    private static final String GEMINI_KEY_ENV = %22GEMINI_KEY%22;%0D%0A%0D%0A    public static void main(String%5B%5D args) %7B%0D%0A        // 1. R%C3%A9cup%C3%A9rer la cl%C3%A9 d'API depuis les variables d'environnement%0D%0A        String apiKey = System.getenv(GEMINI_KEY_ENV);%0D%0A        if (apiKey == null %7C%7C apiKey.isBlank()) %7B%0D%0A            System.err.println(%22La cl%C3%A9 d'API Google Gemini est introuvable. D%C3%A9finissez la variable d'environnement 'GEMINI_KEY'.%22);%0D%0A            return;%0D%0A        %7D%0D%0A%0D%0A        // 2. Cr%C3%A9er et configurer le mod%C3%A8le Gemini%0D%0A        ChatModel geminiModel = buildGeminiModel(apiKey);%0D%0A%0D%0A        // 3. Pr%C3%A9parer la requ%C3%AAte %C3%A0 envoyer au mod%C3%A8le%0D%0A        String question = %22Posez votre question ici%22;%0D%0A%0D%0A        // 4. Interroger le mod%C3%A8le et r%C3%A9cup%C3%A9rer la r%C3%A9ponse%0D%0A        String response = geminiModel.chat(question);%0D%0A%0D%0A        // 5. Afficher la r%C3%A9ponse%0D%0A        System.out.println(%22R%C3%A9ponse du mod%C3%A8le : %22 + response);%0D%0A    %7D%0D%0A%0D%0A    private static ChatModel buildGeminiModel(String apiKey) %7B%0D%0A        return GoogleAiGeminiChatModel.builder()%0D%0A                .apiKey(apiKey)%0D%0A                .modelName(%22gemini-2.5-flash%22)%0D%0A                .build();\n %0D%0A  \n&quot;,&quot;isNew&quot;:false,&quot;isApplied&quot;:true,&quot;isUnread&quot;:true,&quot;timestamp&quot;:1761840073578}]}],&quot;context&quot;:{&quot;author&quot;:&quot;Code agent&quot;,&quot;operationId&quot;:&quot;69bb39a3-c076-4313-8c62-99938de2f27f&quot;,&quot;usageStatistics&quot;:{&quot;llmCallsUsedForAnswer&quot;:2.0,&quot;llmCallsUsedTotal&quot;:9.0,&quot;llmCallsLimit&quot;:30.0,&quot;limitRenewalMillisecondTimestamp&quot;:1761852098107}},&quot;createdAt&quot;:1761840055740,&quot;isInternal&quot;:false},{&quot;id&quot;:&quot;8aff9739-c8ef-462c-a638-ffcb7b51baec&quot;,&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\&quot;C:\\Program Files\\Eclipse Adoptium\\jdk-21.0.8.9-hotspot\\bin\\java.exe\&quot; \&quot;-javaagent:C:\\Program Files\\JetBrains\\IntelliJ IDEA 2024.3.5\\lib\\idea_rt.jar=64942\&quot; -Dfile.encoding=UTF-8 -Dsun.stdout.encoding=UTF-8 -Dsun.stderr.encoding=UTF-8 -classpath \&quot;C:\\Users\\ProBook\\Documents\\Projets IntelliJ IDEA\\AI\\TPs Casablanca\\tp2testkharraz\\target\\classes;C:\\Users\\ProBook\\.m2\\repository\\dev\\langchain4j\\langchain4j\\1.5.0\\langchain4j-1.5.0.jar;C:\\Users\\ProBook\\.m2\\repository\\dev\\langchain4j\\langchain4j-core\\1.5.0\\langchain4j-core-1.5.0.jar;C:\\Users\\ProBook\\.m2\\repository\\org\\jspecify\\jspecify\\1.0.0\\jspecify-1.0.0.jar;C:\\Users\\ProBook\\.m2\\repository\\com\\fasterxml\\jackson\\core\\jackson-annotations\\2.19.2\\jackson-annotations-2.19.2.jar;C:\\Users\\ProBook\\.m2\\repository\\com\\fasterxml\\jackson\\core\\jackson-core\\2.19.2\\jackson-core-2.19.2.jar;C:\\Users\\ProBook\\.m2\\repository\\com\\fasterxml\\jackson\\core\\jackson-databind\\2.19.2\\jackson-databind-2.19.2.jar;C:\\Users\\ProBook\\.m2\\repository\\org\\apache\\opennlp\\opennlp-tools\\2.5.4\\opennlp-tools-2.5.4.jar;C:\\Users\\ProBook\\.m2\\repository\\org\\slf4j\\slf4j-api\\2.0.17\\slf4j-api-2.0.17.jar;C:\\Users\\ProBook\\.m2\\repository\\dev\\langchain4j\\langchain4j-google-ai-gemini\\1.5.0\\langchain4j-google-ai-gemini-1.5.0.jar;C:\\Users\\ProBook\\.m2\\repository\\dev\\langchain4j\\langchain4j-http-client\\1.5.0\\langchain4j-http-client-1.5.0.jar;C:\\Users\\ProBook\\.m2\\repository\\dev\\langchain4j\\langchain4j-http-client-jdk\\1.5.0\\langchain4j-http-client-jdk-1.5.0.jar\&quot; ma.emsi.kharraz.Test1&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;SLF4J(W): No SLF4J providers were found.&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;SLF4J(W): Defaulting to no-operation (NOP) logger implementation&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;SLF4J(W): See https://www.slf4j.org/codes.html#noProviders for further details.&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;corrige moi les erreurs&quot;}],&quot;context&quot;:{&quot;currentFile&quot;:{&quot;path&quot;:&quot;src/main/java/ma/emsi/kharraz/Test1.java&quot;,&quot;fsPath&quot;:&quot;C:/Users/ProBook/Documents/Projets IntelliJ IDEA/AI/TPs Casablanca/tp2testkharraz/src/main/java/ma/emsi/kharraz/Test1.java&quot;,&quot;sources&quot;:[&quot;opened_tab&quot;],&quot;content&quot;:&quot;package ma.emsi.kharraz;\n\nimport dev.langchain4j.model.chat.ChatModel;\nimport dev.langchain4j.model.googleai.GoogleAiGeminiChatModel;\n\npublic class Test1 {\n\n\n    public static void main(String[] args) {\n        // 1. Récupérer la clé d'API depuis les variables d'environnement\n        String apiKey = System.getenv(\&quot;GEMINI_KEY\&quot;);\n\n\n        String cle = System.getenv(\&quot;GEMINI_KEY\&quot;);// Création du modèle\n        ChatModel modele = GoogleAiGeminiChatModel.builder()\n                .apiKey(cle).modelName(\&quot;gemini-2.5-flash\&quot;).build();\n\n        String question = \&quot;Posez votre question ici\&quot;;\n\n        String response = modele.chat(question);\n\n        System.out.println(\&quot;Réponse du modèle : \&quot; + response);\n    }\n\n\n}\n&quot;,&quot;language&quot;:&quot;java&quot;},&quot;codebaseEnabled&quot;:true},&quot;createdAt&quot;:1761840316950,&quot;isInternal&quot;:false,&quot;rawContent&quot;:{&quot;type&quot;:&quot;doc&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\&quot;C:\\Program Files\\Eclipse Adoptium\\jdk-21.0.8.9-hotspot\\bin\\java.exe\&quot; \&quot;-javaagent:C:\\Program Files\\JetBrains\\IntelliJ IDEA 2024.3.5\\lib\\idea_rt.jar=64942\&quot; -Dfile.encoding=UTF-8 -Dsun.stdout.encoding=UTF-8 -Dsun.stderr.encoding=UTF-8 -classpath \&quot;C:\\Users\\ProBook\\Documents\\Projets IntelliJ IDEA\\AI\\TPs Casablanca\\tp2testkharraz\\target\\classes;C:\\Users\\ProBook\\.m2\\repository\\dev\\langchain4j\\langchain4j\\1.5.0\\langchain4j-1.5.0.jar;C:\\Users\\ProBook\\.m2\\repository\\dev\\langchain4j\\langchain4j-core\\1.5.0\\langchain4j-core-1.5.0.jar;C:\\Users\\ProBook\\.m2\\repository\\org\\jspecify\\jspecify\\1.0.0\\jspecify-1.0.0.jar;C:\\Users\\ProBook\\.m2\\repository\\com\\fasterxml\\jackson\\core\\jackson-annotations\\2.19.2\\jackson-annotations-2.19.2.jar;C:\\Users\\ProBook\\.m2\\repository\\com\\fasterxml\\jackson\\core\\jackson-core\\2.19.2\\jackson-core-2.19.2.jar;C:\\Users\\ProBook\\.m2\\repository\\com\\fasterxml\\jackson\\core\\jackson-databind\\2.19.2\\jackson-databind-2.19.2.jar;C:\\Users\\ProBook\\.m2\\repository\\org\\apache\\opennlp\\opennlp-tools\\2.5.4\\opennlp-tools-2.5.4.jar;C:\\Users\\ProBook\\.m2\\repository\\org\\slf4j\\slf4j-api\\2.0.17\\slf4j-api-2.0.17.jar;C:\\Users\\ProBook\\.m2\\repository\\dev\\langchain4j\\langchain4j-google-ai-gemini\\1.5.0\\langchain4j-google-ai-gemini-1.5.0.jar;C:\\Users\\ProBook\\.m2\\repository\\dev\\langchain4j\\langchain4j-http-client\\1.5.0\\langchain4j-http-client-1.5.0.jar;C:\\Users\\ProBook\\.m2\\repository\\dev\\langchain4j\\langchain4j-http-client-jdk\\1.5.0\\langchain4j-http-client-jdk-1.5.0.jar\&quot; ma.emsi.kharraz.Test1&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;SLF4J(W): No SLF4J providers were found.&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;SLF4J(W): Defaulting to no-operation (NOP) logger implementation&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;SLF4J(W): See https://www.slf4j.org/codes.html#noProviders for further details.&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;corrige moi les erreurs&quot;}]}]},&quot;autoAppliedRules&quot;:[]},{&quot;id&quot;:&quot;d5203a87-00e8-4237-a0a7-5ea1bb194f21&quot;,&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;thought&quot;,&quot;text&quot;:&quot;**Preparing to restructure code and fix warnings**&quot;},{&quot;type&quot;:&quot;toolCall&quot;,&quot;toolCallId&quot;:&quot;call_pKiyyWmT2j10e6NOeX7GGsSV&quot;,&quot;statusText&quot;:&quot;Viewed file (lines 1:27)&quot;,&quot;status&quot;:&quot;SUCCESS&quot;,&quot;context&quot;:{&quot;files&quot;:[{&quot;path&quot;:&quot;src/main/java/ma/emsi/kharraz/Test1.java&quot;,&quot;fsPath&quot;:&quot;C:/Users/ProBook/Documents/Projets IntelliJ IDEA/AI/TPs Casablanca/tp2testkharraz/src/main/java/ma/emsi/kharraz/Test1.java&quot;}]},&quot;isHidden&quot;:false},{&quot;type&quot;:&quot;thought&quot;,&quot;text&quot;:&quot;**Fixing code duplication and structure**&quot;},{&quot;type&quot;:&quot;toolCall&quot;,&quot;toolCallId&quot;:&quot;call_62rFoVfbwJ6rAblFitxT3ZOs&quot;,&quot;statusText&quot;:&quot;Change generated&quot;,&quot;status&quot;:&quot;SUCCESS&quot;,&quot;context&quot;:{&quot;files&quot;:[{&quot;path&quot;:&quot;src/main/java/ma/emsi/kharraz/Test1.java&quot;,&quot;fsPath&quot;:&quot;C:/Users/ProBook/Documents/Projets IntelliJ IDEA/AI/TPs Casablanca/tp2testkharraz/src/main/java/ma/emsi/kharraz/Test1.java&quot;}]},&quot;isHidden&quot;:false},{&quot;type&quot;:&quot;codeHunk&quot;,&quot;lineBasedDiff&quot;:&quot;--- C:/Users/ProBook/Documents/Projets IntelliJ IDEA/AI/TPs Casablanca/tp2testkharraz/src/main/java/ma/emsi/kharraz/Test1.java\n+++ C:/Users/ProBook/Documents/Projets IntelliJ IDEA/AI/TPs Casablanca/tp2testkharraz/src/main/java/ma/emsi/kharraz/Test1.java\n@@ -5,22 +5,33 @@\n \n public class Test1 {\n \n+    private static final String GEMINI_KEY_ENV = \&quot;GEMINI_KEY\&quot;;\n \n     public static void main(String[] args) {\n         // 1. Récupérer la clé d'API depuis les variables d'environnement\n-        String apiKey = System.getenv(\&quot;GEMINI_KEY\&quot;);\n+        String apiKey = System.getenv(GEMINI_KEY_ENV);\n+        if (apiKey == null || apiKey.isBlank()) {\n+            System.err.println(\&quot;La clé d'API Google Gemini est introuvable. Définissez la variable d'environnement 'GEMINI_KEY'.\&quot;);\n+            return;\n+        }\n \n+        // 2. Créer et configurer le modèle Gemini\n+        ChatModel geminiModel = buildGeminiModel(apiKey);\n \n-        String cle = System.getenv(\&quot;GEMINI_KEY\&quot;);// Création du modèle\n-        ChatModel modele = GoogleAiGeminiChatModel.builder()\n-                .apiKey(cle).modelName(\&quot;gemini-2.5-flash\&quot;).build();\n-\n+        // 3. Préparer la requête à envoyer au modèle\n         String question = \&quot;Posez votre question ici\&quot;;\n \n-        String response = modele.chat(question);\n+        // 4. Interroger le modèle et récupérer la réponse\n+        String response = geminiModel.chat(question);\n \n+        // 5. Afficher la réponse\n         System.out.println(\&quot;Réponse du modèle : \&quot; + response);\n     }\n \n-\n+    private static ChatModel buildGeminiModel(String apiKey) {\n+        return GoogleAiGeminiChatModel.builder()\n+                .apiKey(apiKey)\n+                .modelName(\&quot;gemini-2.5-flash\&quot;)\n+                .build();\n+    }\n }&quot;,&quot;refToolCallId&quot;:&quot;call_62rFoVfbwJ6rAblFitxT3ZOs&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;j-`, etcimpl2., selon votre préférence.*\n\n##chain Pro ✅es étapes\n1. **Vérifiez** que la variable d’environnement `GEMINI_KEY` est bien définie et contient une valide clé.\n2. **Aj&quot;},{&quot;type&quot;:&quot;codePatch&quot;,&quot;diffs&quot;:[{&quot;path&quot;:&quot;src/main/java/ma/emsi/kharraz/Test1.java&quot;,&quot;fsPath&quot;:&quot;C:/Users/ProBook/Documents/Projets IntelliJ IDEA/AI/TPs Casablanca/tp2testkharraz/src/main/java/ma/emsi/kharraz/Test1.java&quot;,&quot;patch&quot;:&quot;@@ -153,24 +153,88 @@\n  Test1 %7B%0D%0A%0D%0A\n+    private static final String GEMINI_KEY_ENV = %22GEMINI_KEY%22;%0D%0A\n %0D%0A    public\n@@ -374,33 +374,32 @@\n = System.getenv(\n-%22\n GEMINI_KEY%22);%0D%0A%0D\n@@ -396,53 +396,183 @@\n _KEY\n-%22);%0D%0A%0D%0A%0D%0A        String cle = System.getenv(%22\n+_ENV);%0D%0A        if (apiKey == null %7C%7C apiKey.isBlank()) %7B%0D%0A            System.err.println(%22La cl%C3%A9 d'API Google Gemini est introuvable. D%C3%A9finissez la variable d'environnement '\n GEMI\n@@ -581,32 +581,99 @@\n _KEY\n+'.\n %22);\n-// Cr%C3%A9ation du mod%C3%A8le\n+%0D%0A            return;%0D%0A        %7D%0D%0A%0D%0A        // 2. Cr%C3%A9er et configurer le mod%C3%A8le Gemini\n %0D%0A  \n@@ -692,121 +692,104 @@\n del \n-m\n+geminiM\n odel\n-e\n  = \n-GoogleAi\n+build\n Gemini\n-Chat\n Model\n-.builder()%0D%0A                .apiKey(cle).modelName(%22gemini-2.5-flash%22).build();%0D%0A\n+(apiKey);%0D%0A%0D%0A        // 3. Pr%C3%A9parer la requ%C3%AAte %C3%A0 envoyer au mod%C3%A8le\n %0D%0A  \n@@ -839,24 +839,84 @@\n on ici%22;%0D%0A%0D%0A\n+        // 4. Interroger le mod%C3%A8le et r%C3%A9cup%C3%A9rer la r%C3%A9ponse%0D%0A\n         Stri\n@@ -933,14 +933,19 @@\n e = \n-m\n+geminiM\n odel\n-e\n .cha\n@@ -956,24 +956,59 @@\n estion);%0D%0A%0D%0A\n+        // 5. Afficher la r%C3%A9ponse%0D%0A\n         Syst\n@@ -1068,13 +1068,240 @@\n    %7D%0D%0A%0D%0A\n+    private static ChatModel buildGeminiModel(String apiKey) %7B%0D%0A        return GoogleAiGeminiChatModel.builder()%0D%0A                .apiKey(apiKey)%0D%0A                .modelName(%22gemini-2.5-flash%22)%0D%0A                .build();%0D%0A    %7D\n %0D%0A%7D%0D%0A\n&quot;,&quot;isNew&quot;:false,&quot;isApplied&quot;:true,&quot;isUnread&quot;:true,&quot;timestamp&quot;:1761840345790}]}],&quot;context&quot;:{&quot;author&quot;:&quot;Code agent&quot;,&quot;operationId&quot;:&quot;6fc078a1-e4d3-4593-8682-d35cdc6e2486&quot;,&quot;usageStatistics&quot;:{&quot;llmCallsUsedForAnswer&quot;:3.0,&quot;llmCallsUsedTotal&quot;:12.0,&quot;llmCallsLimit&quot;:30.0,&quot;limitRenewalMillisecondTimestamp&quot;:1761852098831}},&quot;createdAt&quot;:1761840321669,&quot;isInternal&quot;:false},{&quot;id&quot;:&quot;fa78cc14-1c9a-4fc6-926f-627003ce3dc5&quot;,&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;aplliqu ces changements&quot;}],&quot;context&quot;:{&quot;currentFile&quot;:{&quot;path&quot;:&quot;src/main/java/ma/emsi/kharraz/Test1.java&quot;,&quot;fsPath&quot;:&quot;C:/Users/ProBook/Documents/Projets IntelliJ IDEA/AI/TPs Casablanca/tp2testkharraz/src/main/java/ma/emsi/kharraz/Test1.java&quot;,&quot;sources&quot;:[&quot;opened_tab&quot;],&quot;content&quot;:&quot;package ma.emsi.kharraz;\n\nimport dev.langchain4j.model.chat.ChatModel;\nimport dev.langchain4j.model.googleai.GoogleAiGeminiChatModel;\n\npublic class Test1 {\n\n    private static final String GEMINI_KEY_ENV = \&quot;GEMINI_KEY\&quot;;\n\n    public static void main(String[] args) {\n        // 1. Récupérer la clé d'API depuis les variables d'environnement\n        String apiKey = System.getenv(GEMINI_KEY_ENV);\n        if (apiKey == null || apiKey.isBlank()) {\n            System.err.println(\&quot;La clé d'API Google Gemini est introuvable. Définissez la variable d'environnement 'GEMINI_KEY'.\&quot;);\n            return;\n        }\n\n        // 2. Créer et configurer le modèle Gemini\n        ChatModel geminiModel = buildGeminiModel(apiKey);\n\n        // 3. Préparer la requête à envoyer au modèle\n        String question = \&quot;Posez votre question ici\&quot;;\n\n        // 4. Interroger le modèle et récupérer la réponse\n        String response = geminiModel.chat(question);\n\n        // 5. Afficher la réponse\n        System.out.println(\&quot;Réponse du modèle : \&quot; + response);\n    }\n\n    private static ChatModel buildGeminiModel(String apiKey) {\n        return GoogleAiGeminiChatModel.builder()\n                .apiKey(apiKey)\n                .modelName(\&quot;gemini-2.5-flash\&quot;)\n                .build();\n    }\n}\n&quot;,&quot;language&quot;:&quot;java&quot;},&quot;codebaseEnabled&quot;:true},&quot;createdAt&quot;:1761840439824,&quot;isInternal&quot;:false,&quot;rawContent&quot;:{&quot;type&quot;:&quot;doc&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;aplliqu ces changements&quot;}]}]},&quot;autoAppliedRules&quot;:[]},{&quot;id&quot;:&quot;40f1c56f-dd8f-4269-85ca-1fd3dea0f599&quot;,&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;thought&quot;,&quot;text&quot;:&quot;**Preparing to check repo instructions**&quot;},{&quot;type&quot;:&quot;toolCall&quot;,&quot;toolCallId&quot;:&quot;call_x9VCj3v3jaP5yyQ8diRwiJzU&quot;,&quot;statusText&quot;:&quot;Viewed directory&quot;,&quot;status&quot;:&quot;SUCCESS&quot;,&quot;context&quot;:{&quot;files&quot;:[{&quot;path&quot;:&quot;.zencoder&quot;,&quot;fsPath&quot;:&quot;C:/Users/ProBook/Documents/Projets IntelliJ IDEA/AI/TPs Casablanca/tp2testkharraz/.zencoder&quot;}]},&quot;isHidden&quot;:false},{&quot;type&quot;:&quot;toolCall&quot;,&quot;toolCallId&quot;:&quot;call_VOmOyhKN8YPPQnbfZrzRasCx&quot;,&quot;title&quot;:&quot;&quot;,&quot;statusText&quot;:&quot;File not found&quot;,&quot;status&quot;:&quot;WARNING&quot;,&quot;isHidden&quot;:false},{&quot;type&quot;:&quot;thought&quot;,&quot;text&quot;:&quot;**Considering file creation suggestion**&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;# Plan d’action\n\n1. **Constat initial**  \n   - Le fichier d’informations du dépôt `.zencoder/rules/repo.md` est absent. Je vous recommande de le générer pour faciliter les prochaines interventions automatisées. Souhaitez-vous que je propose un contenu standard pour ce fichier ?\n\n2. **Point sur `Test1.java`**  \n   - La classe est déjà structurée conformément au snippet actuel (clés API, utilitaire `buildGeminiModel`, séquencement de l’appel).  \n   - Aucun changement supplémentaire n’est nécessaire dans ce fichier si vous êtes satisfait de l’état actuel.\n\n3. **Suite**  \n   - Confirmez si vous souhaitez que je génère le fichier `.zencoder/rules/repo.md`.  \n   - Dites-moi également si vous attendez une autre modification dans le projet.&quot;}],&quot;context&quot;:{&quot;author&quot;:&quot;Code agent&quot;,&quot;operationId&quot;:&quot;e8305fdb-3fc7-401c-9f53-8ae152af0cc6&quot;,&quot;usageStatistics&quot;:{&quot;llmCallsUsedForAnswer&quot;:3.0,&quot;llmCallsUsedTotal&quot;:16.0,&quot;llmCallsLimit&quot;:30.0,&quot;limitRenewalMillisecondTimestamp&quot;:1761852098293}},&quot;createdAt&quot;:1761840444998,&quot;isInternal&quot;:false}],&quot;isAgent&quot;:true,&quot;isNameGenerated&quot;:true,&quot;isCustomAgent&quot;:false,&quot;isUnitTestsAgent&quot;:false,&quot;isE2EAgent&quot;:false,&quot;isQnaAgent&quot;:false,&quot;isRepoInfoAgent&quot;:false,&quot;isClaudeCode&quot;:false,&quot;isZencoderCli&quot;:false,&quot;autoApply&quot;:true,&quot;model&quot;:&quot;default&quot;},&quot;48a29425-e3b0-47c9-9c58-163aeaa10621&quot;:{&quot;id&quot;:&quot;48a29425-e3b0-47c9-9c58-163aeaa10621&quot;,&quot;createdAt&quot;:1761841620184,&quot;updatedAt&quot;:1761841620188,&quot;title&quot;:&quot;Test 2 : un traducteur Comme le test 1 mais vou...&quot;,&quot;messages&quot;:[{&quot;id&quot;:&quot;61b17fbc-fda6-4805-8bf6-109ecaec2089&quot;,&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Test 2 : un traducteur&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Comme le test 1 mais vous allez ajouter l'utilisation des classes PromptTemplate et Prompt.&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Utilisez le PromptTemplate qui pourrait convenir pour un traducteur, avec une variable pour le texte à traduire. Le prompt pourrait, par exemple, correspondre à \&quot;Traduis le texte suivant en anglais : ****\&quot;, avec la valeur de \&quot;****\&quot; donnée par un paramètre du template.&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;genere moi cette classe d'aprés ça&quot;}],&quot;context&quot;:{&quot;currentFile&quot;:{&quot;path&quot;:&quot;src/main/java/ma/emsi/kharraz/Test2.java&quot;,&quot;fsPath&quot;:&quot;C:/Users/ProBook/Documents/Projets IntelliJ IDEA/AI/TPs Casablanca/tp2testkharraz/src/main/java/ma/emsi/kharraz/Test2.java&quot;,&quot;sources&quot;:[&quot;opened_tab&quot;],&quot;content&quot;:&quot;package ma.emsi.kharraz;\n\npublic class Test2 {\n}\n&quot;,&quot;language&quot;:&quot;java&quot;},&quot;codebaseEnabled&quot;:true},&quot;createdAt&quot;:1761841620188,&quot;isInternal&quot;:false,&quot;rawContent&quot;:{&quot;type&quot;:&quot;doc&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Test 2 : un traducteur&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Comme le test 1 mais vous allez ajouter l'utilisation des classes PromptTemplate et Prompt.&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Utilisez le PromptTemplate qui pourrait convenir pour un traducteur, avec une variable pour le texte à traduire. Le prompt pourrait, par exemple, correspondre à \&quot;Traduis le texte suivant en anglais : ****\&quot;, avec la valeur de \&quot;****\&quot; donnée par un paramètre du template.&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;genere moi cette classe d'aprés ça&quot;}]}]},&quot;autoAppliedRules&quot;:[]}],&quot;isAgent&quot;:true,&quot;isCustomAgent&quot;:false,&quot;isUnitTestsAgent&quot;:false,&quot;isE2EAgent&quot;:false,&quot;isQnaAgent&quot;:false,&quot;isRepoInfoAgent&quot;:false,&quot;isClaudeCode&quot;:false,&quot;isZencoderCli&quot;:false,&quot;autoApply&quot;:true,&quot;model&quot;:&quot;default&quot;},&quot;1abb7af3-236f-4900-be73-f5a782653c57&quot;:{&quot;id&quot;:&quot;1abb7af3-236f-4900-be73-f5a782653c57&quot;,&quot;createdAt&quot;:1761841872143,&quot;updatedAt&quot;:1761841872147,&quot;title&quot;:&quot;package org.example; import dev.langchain4j.mod...&quot;,&quot;messages&quot;:[{&quot;id&quot;:&quot;b9115b0d-10fb-4ff1-ab77-ff31c372d496&quot;,&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;package org.example;&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;import dev.langchain4j.model.openai.OpenAiChatModel;&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;import dev.langchain4j.model.chat.ChatLanguageModel;&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;import dev.langchain4j.prompt.Prompt;&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;import dev.langchain4j.prompt.PromptTemplate;&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;public class Traducteur {&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    public static void main(String[] args) {&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        // 1. Créer un modèle de langage (ici OpenAI, mais ça peut être un autre modèle compatible)&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        ChatLanguageModel model = OpenAiChatModel.builder()&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;                .apiKey(System.getenv(\&quot;OPENAI_API_KEY\&quot;)) // ta clé API dans les variables d'environnement&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;                .modelName(\&quot;gpt-3.5-turbo\&quot;) // ou \&quot;gpt-4o-mini\&quot; par exemple&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;                .build();&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        // 2. Définir le template du prompt avec une variable {texte}&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        PromptTemplate template = PromptTemplate.from(\&quot;Traduis le texte suivant en anglais : {{texte}}\&quot;);&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        // 3. Remplacer la variable du template par un texte réel&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        Prompt prompt = template.apply(\&quot;Bonjour, je suis ravie de te rencontrer !\&quot;);&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        // 4. Envoyer le prompt au modèle et récupérer la réponse&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        String traduction = model.generate(prompt.text());&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        // 5. Afficher le résultat&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        System.out.println(\&quot;Texte original : \&quot; + prompt.text());&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        System.out.println(\&quot;Traduction : \&quot; + traduction);&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    }&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;}&quot;}],&quot;context&quot;:{&quot;currentFile&quot;:{&quot;path&quot;:&quot;src/main/java/ma/emsi/kharraz/Test2.java&quot;,&quot;fsPath&quot;:&quot;C:/Users/ProBook/Documents/Projets IntelliJ IDEA/AI/TPs Casablanca/tp2testkharraz/src/main/java/ma/emsi/kharraz/Test2.java&quot;,&quot;sources&quot;:[&quot;opened_tab&quot;],&quot;content&quot;:&quot;package ma.emsi.kharraz;\n\npublic class Test2 {\n}\n\n&quot;,&quot;language&quot;:&quot;java&quot;},&quot;codebaseEnabled&quot;:true},&quot;createdAt&quot;:1761841872147,&quot;isInternal&quot;:false,&quot;rawContent&quot;:{&quot;type&quot;:&quot;doc&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;package org.example;&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;import dev.langchain4j.model.openai.OpenAiChatModel;&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;import dev.langchain4j.model.chat.ChatLanguageModel;&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;import dev.langchain4j.prompt.Prompt;&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;import dev.langchain4j.prompt.PromptTemplate;&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;public class Traducteur {&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    public static void main(String[] args) {&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        // 1. Créer un modèle de langage (ici OpenAI, mais ça peut être un autre modèle compatible)&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        ChatLanguageModel model = OpenAiChatModel.builder()&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;                .apiKey(System.getenv(\&quot;OPENAI_API_KEY\&quot;)) // ta clé API dans les variables d'environnement&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;                .modelName(\&quot;gpt-3.5-turbo\&quot;) // ou \&quot;gpt-4o-mini\&quot; par exemple&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;                .build();&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        // 2. Définir le template du prompt avec une variable {texte}&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        PromptTemplate template = PromptTemplate.from(\&quot;Traduis le texte suivant en anglais : {{texte}}\&quot;);&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        // 3. Remplacer la variable du template par un texte réel&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        Prompt prompt = template.apply(\&quot;Bonjour, je suis ravie de te rencontrer !\&quot;);&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        // 4. Envoyer le prompt au modèle et récupérer la réponse&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        String traduction = model.generate(prompt.text());&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        // 5. Afficher le résultat&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        System.out.println(\&quot;Texte original : \&quot; + prompt.text());&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;        System.out.println(\&quot;Traduction : \&quot; + traduction);&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    }&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;}&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;}]},&quot;autoAppliedRules&quot;:[]}],&quot;isAgent&quot;:true,&quot;isCustomAgent&quot;:false,&quot;isUnitTestsAgent&quot;:false,&quot;isE2EAgent&quot;:false,&quot;isQnaAgent&quot;:false,&quot;isRepoInfoAgent&quot;:false,&quot;isClaudeCode&quot;:false,&quot;isZencoderCli&quot;:false,&quot;autoApply&quot;:true,&quot;model&quot;:&quot;default&quot;},&quot;40b64d6b-4740-48d9-833e-533a58214d1c&quot;:{&quot;id&quot;:&quot;40b64d6b-4740-48d9-833e-533a58214d1c&quot;,&quot;createdAt&quot;:1761855753898,&quot;updatedAt&quot;:1761855754218,&quot;title&quot;:&quot;C:\\Users\\ProBook\\Documents\\Projets IntelliJ IDE...&quot;,&quot;messages&quot;:[{&quot;id&quot;:&quot;45bffd75-94ee-44a8-ade7-05e9b084f4e7&quot;,&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;C:\\Users\\ProBook\\Documents\\Projets IntelliJ IDEA\\AI\\TPs Casablanca\\tp2testkharraz\\src\\main\\java\\ma\\emsi\\kharraz\\Test3.java:4:38&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;java: cannot find symbol&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  symbol:   class EmbeddingMatch&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  location: package dev.langchain4j.data.embedding&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;C:\\Users\\ProBook\\Documents\\Projets IntelliJ IDEA\\AI\\TPs Casablanca\\tp2testkharraz\\src\\main\\java\\ma\\emsi\\kharraz\\Test3.java:5:38&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;java: cannot find symbol&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  symbol:   class EmbeddingMatchResult&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  location: package dev.langchain4j.data.embedding&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;C:\\Users\\ProBook\\Documents\\Projets IntelliJ IDEA\\AI\\TPs Casablanca\\tp2testkharraz\\src\\main\\java\\ma\\emsi\\kharraz\\Test3.java:6:38&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;java: cannot find symbol&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  symbol:   class CosineSimilarity&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  location: package dev.langchain4j.data.embedding&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;C:\\Users\\ProBook\\Documents\\Projets IntelliJ IDEA\\AI\\TPs Casablanca\\tp2testkharraz\\src\\main\\java\\ma\\emsi\\kharraz\\Test3.java:8:39&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;java: cannot find symbol&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  symbol:   class TaskType&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  location: package dev.langchain4j.model.embedding&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;C:\\Users\\ProBook\\Documents\\Projets IntelliJ IDEA\\AI\\TPs Casablanca\\tp2testkharraz\\src\\main\\java\\ma\\emsi\\kharraz\\Test3.java:11:39&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;java: cannot find symbol&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  symbol:   class InMemoryEmbeddingStore&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  location: package dev.langchain4j.store.embedding&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;C:\\Users\\ProBook\\Documents\\Projets IntelliJ IDEA\\AI\\TPs Casablanca\\tp2testkharraz\\src\\main\\java\\ma\\emsi\\kharraz\\Test3.java:43:56&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;java: cannot find symbol&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  symbol:   class InMemoryEmbeddingStore&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  location: class ma.emsi.kharraz.Test3&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;C:\\Users\\ProBook\\Documents\\Projets IntelliJ IDEA\\AI\\TPs Casablanca\\tp2testkharraz\\src\\main\\java\\ma\\emsi\\kharraz\\Test3.java:47:56&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;java: incompatible types: inference variable T has incompatible bounds&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    equality constraints: dev.langchain4j.data.segment.TextSegment&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    lower bounds: java.lang.String&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;C:\\Users\\ProBook\\Documents\\Projets IntelliJ IDEA\\AI\\TPs Casablanca\\tp2testkharraz\\src\\main\\java\\ma\\emsi\\kharraz\\Test3.java:54:39&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;java: cannot find symbol&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  symbol:   variable CosineSimilarity&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  location: class ma.emsi.kharraz.Test3&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;C:\\Users\\ProBook\\Documents\\Projets IntelliJ IDEA\\AI\\TPs Casablanca\\tp2testkharraz\\src\\main\\java\\ma\\emsi\\kharraz\\Test3.java:70:13&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;java: cannot find symbol&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  symbol:   class EmbeddingMatchResult&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  location: class ma.emsi.kharraz.Test3&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;C:\\Users\\ProBook\\Documents\\Projets IntelliJ IDEA\\AI\\TPs Casablanca\\tp2testkharraz\\src\\main\\java\\ma\\emsi\\kharraz\\Test3.java:70:73&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;java: cannot find symbol&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  symbol:   method findRelevant(dev.langchain4j.data.embedding.Embedding,int)&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  location: variable embeddingStore of type dev.langchain4j.store.embedding.EmbeddingStore&lt;dev.langchain4j.data.embedding.Embedding&gt;&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;C:\\Users\\ProBook\\Documents\\Projets IntelliJ IDEA\\AI\\TPs Casablanca\\tp2testkharraz\\src\\main\\java\\ma\\emsi\\kharraz\\Test3.java:73:18&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;java: cannot find symbol&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  symbol:   class EmbeddingMatch&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  location: class ma.emsi.kharraz.Test3&quot;}],&quot;context&quot;:{&quot;currentFile&quot;:{&quot;path&quot;:&quot;src/main/java/ma/emsi/kharraz/Test3.java&quot;,&quot;fsPath&quot;:&quot;C:/Users/ProBook/Documents/Projets IntelliJ IDEA/AI/TPs Casablanca/tp2testkharraz/src/main/java/ma/emsi/kharraz/Test3.java&quot;,&quot;sources&quot;:[&quot;opened_tab&quot;],&quot;content&quot;:&quot;package ma.emsi.kharraz;\n\nimport dev.langchain4j.data.embedding.Embedding;\nimport dev.langchain4j.data.embedding.EmbeddingMatch;\nimport dev.langchain4j.data.embedding.EmbeddingMatchResult;\nimport dev.langchain4j.data.embedding.CosineSimilarity;\nimport dev.langchain4j.model.embedding.EmbeddingModel;\nimport dev.langchain4j.model.embedding.TaskType;\nimport dev.langchain4j.model.googleai.GoogleAiEmbeddingModel;\nimport dev.langchain4j.store.embedding.EmbeddingStore;\nimport dev.langchain4j.store.embedding.InMemoryEmbeddingStore;\n\nimport java.time.Duration;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class Test3 {\n\n    private static final String GEMINI_KEY_ENV = \&quot;GEMINI_KEY\&quot;;\n\n    public static void main(String[] args) {\n        String apiKey = System.getenv(GEMINI_KEY_ENV);\n        if (apiKey == null || apiKey.isBlank()) {\n            System.err.println(\&quot;La clé GEMINI_KEY est introuvable dans les variables d'environnement.\&quot;);\n            return;\n        }\n\n        EmbeddingModel embeddingModel = GoogleAiEmbeddingModel.builder()\n                .apiKey(apiKey)\n                .modelName(\&quot;text-embedding-004\&quot;)\n                .taskType(GoogleAiEmbeddingModel.TaskType.SEMANTIC_SIMILARITY)\n                .outputDimensionality(300)\n                .timeout(Duration.ofMillis(100))\n                .build();\n\n        List&lt;String[]&gt; sentencePairs = Arrays.asList(\n                new String[]{\&quot;Les chats aiment dormir au soleil.\&quot;, \&quot;Les félins apprécient se prélasser dans la lumière.\&quot;},\n                new String[]{\&quot;Je vais acheter du pain à la boulangerie.\&quot;, \&quot;Je suis en retard pour la réunion.\&quot;},\n                new String[]{\&quot;Le ciel est bleu aujourd'hui.\&quot;, \&quot;Aujourd'hui, le ciel paraît dégagé et azur.\&quot;},\n                new String[]{\&quot;Il pleut beaucoup dans cette région.\&quot;, \&quot;Cette région est très ensoleillée.\&quot;}\n        );\n\n        EmbeddingStore&lt;Embedding&gt; embeddingStore = new InMemoryEmbeddingStore&lt;&gt;();\n\n        for (int i = 0; i &lt; sentencePairs.size(); i++) {\n            String[] pair = sentencePairs.get(i);\n            List&lt;Embedding&gt; embeddings = embeddingModel.embedAll(Arrays.asList(pair[0], pair[1])).content();\n            Embedding firstEmbedding = embeddings.get(0);\n            Embedding secondEmbedding = embeddings.get(1);\n\n            embeddingStore.add(firstEmbedding);\n            embeddingStore.add(secondEmbedding);\n\n            double cosineSimilarity = CosineSimilarity.between(firstEmbedding, secondEmbedding);\n\n            System.out.printf(\&quot;Paire %d:%n\&quot;, i + 1);\n            System.out.printf(\&quot;\\tPhrase A: %s%n\&quot;, pair[0]);\n            System.out.printf(\&quot;\\tPhrase B: %s%n\&quot;, pair[1]);\n            System.out.printf(\&quot;\\tSimilarité cosinus: %.4f%n%n\&quot;, cosineSimilarity);\n        }\n\n        List&lt;String&gt; queries = Arrays.asList(\n                \&quot;Les chats aiment la chaleur du soleil\&quot;,\n                \&quot;Il faut que je me dépêche pour la réunion\&quot;,\n                \&quot;Le temps est vraiment couvert aujourd'hui\&quot;\n        );\n\n        for (String query : queries) {\n            Embedding queryEmbedding = embeddingModel.embed(query).content();\n            EmbeddingMatchResult&lt;Embedding&gt; matchResult = embeddingStore.findRelevant(queryEmbedding, 2);\n\n            System.out.printf(\&quot;Requête: %s%n\&quot;, query);\n            for (EmbeddingMatch&lt;Embedding&gt; match : matchResult.matches()) {\n                System.out.printf(\&quot;\\tSimilarité: %.4f%n\&quot;, match.score());\n            }\n            System.out.println();\n        }\n    }\n}\n&quot;,&quot;language&quot;:&quot;java&quot;},&quot;codebaseEnabled&quot;:true},&quot;createdAt&quot;:1761855753903,&quot;isInternal&quot;:false,&quot;rawContent&quot;:{&quot;type&quot;:&quot;doc&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;C:\\Users\\ProBook\\Documents\\Projets IntelliJ IDEA\\AI\\TPs Casablanca\\tp2testkharraz\\src\\main\\java\\ma\\emsi\\kharraz\\Test3.java:4:38&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;java: cannot find symbol&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  symbol:   class EmbeddingMatch&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  location: package dev.langchain4j.data.embedding&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;C:\\Users\\ProBook\\Documents\\Projets IntelliJ IDEA\\AI\\TPs Casablanca\\tp2testkharraz\\src\\main\\java\\ma\\emsi\\kharraz\\Test3.java:5:38&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;java: cannot find symbol&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  symbol:   class EmbeddingMatchResult&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  location: package dev.langchain4j.data.embedding&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;C:\\Users\\ProBook\\Documents\\Projets IntelliJ IDEA\\AI\\TPs Casablanca\\tp2testkharraz\\src\\main\\java\\ma\\emsi\\kharraz\\Test3.java:6:38&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;java: cannot find symbol&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  symbol:   class CosineSimilarity&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  location: package dev.langchain4j.data.embedding&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;C:\\Users\\ProBook\\Documents\\Projets IntelliJ IDEA\\AI\\TPs Casablanca\\tp2testkharraz\\src\\main\\java\\ma\\emsi\\kharraz\\Test3.java:8:39&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;java: cannot find symbol&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  symbol:   class TaskType&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  location: package dev.langchain4j.model.embedding&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;C:\\Users\\ProBook\\Documents\\Projets IntelliJ IDEA\\AI\\TPs Casablanca\\tp2testkharraz\\src\\main\\java\\ma\\emsi\\kharraz\\Test3.java:11:39&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;java: cannot find symbol&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  symbol:   class InMemoryEmbeddingStore&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  location: package dev.langchain4j.store.embedding&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;C:\\Users\\ProBook\\Documents\\Projets IntelliJ IDEA\\AI\\TPs Casablanca\\tp2testkharraz\\src\\main\\java\\ma\\emsi\\kharraz\\Test3.java:43:56&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;java: cannot find symbol&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  symbol:   class InMemoryEmbeddingStore&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  location: class ma.emsi.kharraz.Test3&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;C:\\Users\\ProBook\\Documents\\Projets IntelliJ IDEA\\AI\\TPs Casablanca\\tp2testkharraz\\src\\main\\java\\ma\\emsi\\kharraz\\Test3.java:47:56&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;java: incompatible types: inference variable T has incompatible bounds&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    equality constraints: dev.langchain4j.data.segment.TextSegment&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    lower bounds: java.lang.String&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;C:\\Users\\ProBook\\Documents\\Projets IntelliJ IDEA\\AI\\TPs Casablanca\\tp2testkharraz\\src\\main\\java\\ma\\emsi\\kharraz\\Test3.java:54:39&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;java: cannot find symbol&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  symbol:   variable CosineSimilarity&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  location: class ma.emsi.kharraz.Test3&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;C:\\Users\\ProBook\\Documents\\Projets IntelliJ IDEA\\AI\\TPs Casablanca\\tp2testkharraz\\src\\main\\java\\ma\\emsi\\kharraz\\Test3.java:70:13&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;java: cannot find symbol&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  symbol:   class EmbeddingMatchResult&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  location: class ma.emsi.kharraz.Test3&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;C:\\Users\\ProBook\\Documents\\Projets IntelliJ IDEA\\AI\\TPs Casablanca\\tp2testkharraz\\src\\main\\java\\ma\\emsi\\kharraz\\Test3.java:70:73&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;java: cannot find symbol&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  symbol:   method findRelevant(dev.langchain4j.data.embedding.Embedding,int)&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  location: variable embeddingStore of type dev.langchain4j.store.embedding.EmbeddingStore&lt;dev.langchain4j.data.embedding.Embedding&gt;&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;C:\\Users\\ProBook\\Documents\\Projets IntelliJ IDEA\\AI\\TPs Casablanca\\tp2testkharraz\\src\\main\\java\\ma\\emsi\\kharraz\\Test3.java:73:18&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;java: cannot find symbol&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  symbol:   class EmbeddingMatch&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  location: class ma.emsi.kharraz.Test3&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;}]},&quot;autoAppliedRules&quot;:[]},{&quot;id&quot;:&quot;59a29fa3-426d-45b7-91e5-b0c0e7de7f92&quot;,&quot;role&quot;:&quot;system&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;errorText&quot;,&quot;text&quot;:&quot;Rate limit exceeded. You can try again on October 31 at 21:00.&quot;,&quot;actions&quot;:[{&quot;type&quot;:&quot;upgradePlan&quot;,&quot;waitSeconds&quot;:85085},{&quot;type&quot;:&quot;externalAction&quot;,&quot;title&quot;:&quot;Regenerate&quot;,&quot;action&quot;:&quot;regenerateLastAnswer&quot;}]}],&quot;createdAt&quot;:1761855754218,&quot;isInternal&quot;:false}],&quot;isAgent&quot;:true,&quot;isCustomAgent&quot;:false,&quot;isUnitTestsAgent&quot;:false,&quot;isE2EAgent&quot;:false,&quot;isQnaAgent&quot;:false,&quot;isRepoInfoAgent&quot;:false,&quot;isClaudeCode&quot;:false,&quot;isZencoderCli&quot;:false,&quot;autoApply&quot;:true,&quot;model&quot;:&quot;default&quot;},&quot;cb4d5b50-73f5-4f77-80d8-3296aa9a2207&quot;:{&quot;id&quot;:&quot;cb4d5b50-73f5-4f77-80d8-3296aa9a2207&quot;,&quot;createdAt&quot;:1761854466496,&quot;updatedAt&quot;:1761855740045,&quot;title&quot;:&quot;Embeddings et Similarité Cosinus&quot;,&quot;messages&quot;:[{&quot;id&quot;:&quot;2b80ebe2-50df-4b65-9846-cc8cf88d679b&quot;,&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Le programme utilise un modèle d'embeddings pour générer 2 embeddings de 2 phrases et ensuite calculer leur similarité par la métrique du cosinus.&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Une des difficultés est de trouver le bon nom de modèle pour les embeddings. La liste des noms de modèles pour Gemini peut être obtenue en tapant cet URL dans un navigateur : https://generativelanguage.googleapis.com/v1beta/models?key=AIzuuyDTjkuPHjBY... (collez ici votre clé Gemini). Attention, le nom du modèle à mettre dans le code est le nom qui est après \&quot;models/\&quot; dans la liste des modèles. Pour faire le meilleur choix, vous pouvez faire une recherche sur le Web, par exemple sur https://huggingface.co/spaces/mteb/leaderboard, aller sur le site de l'API Gemini, ou demander à une IA.&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Ensuite, allez voir l'interface EmbeddingModel et la classe GoogleAiEmbeddingModel dans la javadoc de LangChain4j. Utilisez le design pattern \&quot;builder\&quot; pour créer une instance de GoogleAiEmbeddingModel. Pour le type de tâche, choisissez TaskType.SEMANTIC_SIMILARITY puiqu'on veut calculer une similarité. Pour la dimension des vecteurs d'embeddings, choisissez par exemple 300. Pour la durée du timeout, utilisez la classe Duration du JDK ; essayez 100 ms et augmentez si ça ne suffit pas.&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Donnez plusieurs couples de phrases, similaires ou pas, pour voir la similarité (plus elle est proche de 1, meilleur elle est).&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Pour récupérer les embeddings à partir des réponses du modèle d'embeddings, utilisez la méthode content().&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;a partir de ce code genere moi la classe test3&quot;}],&quot;context&quot;:{&quot;currentFile&quot;:{&quot;path&quot;:&quot;src/main/java/ma/emsi/kharraz/Test3.java&quot;,&quot;fsPath&quot;:&quot;C:/Users/ProBook/Documents/Projets IntelliJ IDEA/AI/TPs Casablanca/tp2testkharraz/src/main/java/ma/emsi/kharraz/Test3.java&quot;,&quot;sources&quot;:[&quot;opened_tab&quot;],&quot;content&quot;:&quot;package ma.emsi.kharraz;\n\npublic class Test3 {\n}\n&quot;,&quot;language&quot;:&quot;java&quot;},&quot;codebaseEnabled&quot;:true},&quot;createdAt&quot;:1761854466501,&quot;isInternal&quot;:false,&quot;rawContent&quot;:{&quot;type&quot;:&quot;doc&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Le programme utilise un modèle d'embeddings pour générer 2 embeddings de 2 phrases et ensuite calculer leur similarité par la métrique du cosinus.&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Une des difficultés est de trouver le bon nom de modèle pour les embeddings. La liste des noms de modèles pour Gemini peut être obtenue en tapant cet URL dans un navigateur : https://generativelanguage.googleapis.com/v1beta/models?key=AIzuuyDTjkuPHjBY... (collez ici votre clé Gemini). Attention, le nom du modèle à mettre dans le code est le nom qui est après \&quot;models/\&quot; dans la liste des modèles. Pour faire le meilleur choix, vous pouvez faire une recherche sur le Web, par exemple sur https://huggingface.co/spaces/mteb/leaderboard, aller sur le site de l'API Gemini, ou demander à une IA.&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Ensuite, allez voir l'interface EmbeddingModel et la classe GoogleAiEmbeddingModel dans la javadoc de LangChain4j. Utilisez le design pattern \&quot;builder\&quot; pour créer une instance de GoogleAiEmbeddingModel. Pour le type de tâche, choisissez TaskType.SEMANTIC_SIMILARITY puiqu'on veut calculer une similarité. Pour la dimension des vecteurs d'embeddings, choisissez par exemple 300. Pour la durée du timeout, utilisez la classe Duration du JDK ; essayez 100 ms et augmentez si ça ne suffit pas.&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Donnez plusieurs couples de phrases, similaires ou pas, pour voir la similarité (plus elle est proche de 1, meilleur elle est).&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Pour récupérer les embeddings à partir des réponses du modèle d'embeddings, utilisez la méthode content().&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;a partir de ce code genere moi la classe test3&quot;}]}]},&quot;autoAppliedRules&quot;:[]},{&quot;id&quot;:&quot;1ec2a75f-5fca-41e9-8ffb-7acce97dd8fc&quot;,&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;thought&quot;,&quot;text&quot;:&quot;**Preparing to review repository rules**&quot;},{&quot;type&quot;:&quot;toolCall&quot;,&quot;toolCallId&quot;:&quot;call_gPemPQGKjFtQnukgbcbh2SoM&quot;,&quot;title&quot;:&quot;&quot;,&quot;statusText&quot;:&quot;File not found&quot;,&quot;status&quot;:&quot;WARNING&quot;,&quot;isHidden&quot;:false},{&quot;type&quot;:&quot;thought&quot;,&quot;text&quot;:&quot;**Checking project structure and dependencies**&quot;},{&quot;type&quot;:&quot;toolCall&quot;,&quot;toolCallId&quot;:&quot;call_sVL1dBKAgre1mcyP3rwJdOd4&quot;,&quot;statusText&quot;:&quot;Viewed directory&quot;,&quot;status&quot;:&quot;SUCCESS&quot;,&quot;context&quot;:{&quot;files&quot;:[{&quot;path&quot;:&quot;.&quot;,&quot;fsPath&quot;:&quot;C:/Users/ProBook/Documents/Projets IntelliJ IDEA/AI/TPs Casablanca/tp2testkharraz&quot;}]},&quot;isHidden&quot;:false},{&quot;type&quot;:&quot;toolCall&quot;,&quot;toolCallId&quot;:&quot;call_C4WVekvUIox2R6IUO4PLC70k&quot;,&quot;statusText&quot;:&quot;Viewed directory&quot;,&quot;status&quot;:&quot;SUCCESS&quot;,&quot;context&quot;:{&quot;files&quot;:[{&quot;path&quot;:&quot;.zencoder/rules&quot;,&quot;fsPath&quot;:&quot;C:/Users/ProBook/Documents/Projets IntelliJ IDEA/AI/TPs Casablanca/tp2testkharraz/.zencoder/rules&quot;}]},&quot;isHidden&quot;:false},{&quot;type&quot;:&quot;thought&quot;,&quot;text&quot;:&quot;**Preparing to implement Test3 class**&quot;},{&quot;type&quot;:&quot;toolCall&quot;,&quot;toolCallId&quot;:&quot;call_arGW1j00sZxsycrizMxZctOC&quot;,&quot;statusText&quot;:&quot;Viewed file (lines 1:29)&quot;,&quot;status&quot;:&quot;SUCCESS&quot;,&quot;context&quot;:{&quot;files&quot;:[{&quot;path&quot;:&quot;pom.xml&quot;,&quot;fsPath&quot;:&quot;C:/Users/ProBook/Documents/Projets IntelliJ IDEA/AI/TPs Casablanca/tp2testkharraz/pom.xml&quot;}]},&quot;isHidden&quot;:false},{&quot;type&quot;:&quot;thought&quot;,&quot;text&quot;:&quot;**Preparing to implement Test3 class**&quot;},{&quot;type&quot;:&quot;toolCall&quot;,&quot;toolCallId&quot;:&quot;call_zG87rlpnGmWDrr4q63WYksS8&quot;,&quot;statusText&quot;:&quot;Knowledge base search completed&quot;,&quot;status&quot;:&quot;SUCCESS&quot;,&quot;isHidden&quot;:false},{&quot;type&quot;:&quot;toolCall&quot;,&quot;toolCallId&quot;:&quot;call_1DXzKEGhcgTI0vRICSvQPxW7&quot;,&quot;statusText&quot;:&quot;Knowledge base summary retrieved&quot;,&quot;status&quot;:&quot;SUCCESS&quot;,&quot;isHidden&quot;:false},{&quot;type&quot;:&quot;thought&quot;,&quot;text&quot;:&quot;**Planning GoogleAiEmbeddingModel implementation**\n\nI’m considering how to create a Test3 class using the LangChain4j GoogleAiEmbeddingModel builder with TaskType.SEMANTIC_SIMILARITY, a 300-dimension vector, and a timeout of about 100ms. I want to confirm if the dimension can be set or if it’s fixed per model like \&quot;text-embedding-004\&quot; with 768 dimensions, and how to retrieve embeddings from responses. I plan to check existing code and docs to clarify these details before proceeding.&quot;},{&quot;type&quot;:&quot;toolCall&quot;,&quot;toolCallId&quot;:&quot;call_nBMCQ71Qe2k304EplTf1aCCa&quot;,&quot;title&quot;:&quot;Fulltext search&quot;,&quot;statusText&quot;:&quot;Done&quot;,&quot;status&quot;:&quot;SUCCESS&quot;,&quot;isHidden&quot;:false},{&quot;type&quot;:&quot;toolCall&quot;,&quot;toolCallId&quot;:&quot;call_7n8H28Bwanrp0UPUYYmx0jnV&quot;,&quot;statusText&quot;:&quot;Viewed directory&quot;,&quot;status&quot;:&quot;SUCCESS&quot;,&quot;context&quot;:{&quot;files&quot;:[{&quot;path&quot;:&quot;src/main/java&quot;,&quot;fsPath&quot;:&quot;C:/Users/ProBook/Documents/Projets IntelliJ IDEA/AI/TPs Casablanca/tp2testkharraz/src/main/java&quot;}]},&quot;isHidden&quot;:false},{&quot;type&quot;:&quot;toolCall&quot;,&quot;toolCallId&quot;:&quot;call_qXo5FA5rTwMn1WMMxlNfDL4Y&quot;,&quot;statusText&quot;:&quot;Viewed directory&quot;,&quot;status&quot;:&quot;SUCCESS&quot;,&quot;context&quot;:{&quot;files&quot;:[{&quot;path&quot;:&quot;src/main/java/ma/emsi&quot;,&quot;fsPath&quot;:&quot;C:/Users/ProBook/Documents/Projets IntelliJ IDEA/AI/TPs Casablanca/tp2testkharraz/src/main/java/ma/emsi&quot;}]},&quot;isHidden&quot;:false},{&quot;type&quot;:&quot;toolCall&quot;,&quot;toolCallId&quot;:&quot;call_PUb2njOHVFYzSuXYUApHMDEh&quot;,&quot;statusText&quot;:&quot;Viewed file (lines 1:35)&quot;,&quot;status&quot;:&quot;SUCCESS&quot;,&quot;context&quot;:{&quot;files&quot;:[{&quot;path&quot;:&quot;src/main/java/ma/emsi/kharraz/Test2.java&quot;,&quot;fsPath&quot;:&quot;C:/Users/ProBook/Documents/Projets IntelliJ IDEA/AI/TPs Casablanca/tp2testkharraz/src/main/java/ma/emsi/kharraz/Test2.java&quot;}]},&quot;isHidden&quot;:false},{&quot;type&quot;:&quot;thought&quot;,&quot;text&quot;:&quot;**Planning embedding model implementation**&quot;},{&quot;type&quot;:&quot;toolCall&quot;,&quot;toolCallId&quot;:&quot;call_2zFbn375RXN7NAwhUxftfPBI&quot;,&quot;title&quot;:&quot;File search&quot;,&quot;statusText&quot;:&quot;Done&quot;,&quot;status&quot;:&quot;SUCCESS&quot;,&quot;isHidden&quot;:false},{&quot;type&quot;:&quot;thought&quot;,&quot;text&quot;:&quot;**Checking Test1 for reference**&quot;},{&quot;type&quot;:&quot;toolCall&quot;,&quot;toolCallId&quot;:&quot;call_YSNQXoe0Iossujz1WpLTcoPa&quot;,&quot;statusText&quot;:&quot;Viewed file (lines 1:38)&quot;,&quot;status&quot;:&quot;SUCCESS&quot;,&quot;context&quot;:{&quot;files&quot;:[{&quot;path&quot;:&quot;src/main/java/ma/emsi/kharraz/Test1.java&quot;,&quot;fsPath&quot;:&quot;C:/Users/ProBook/Documents/Projets IntelliJ IDEA/AI/TPs Casablanca/tp2testkharraz/src/main/java/ma/emsi/kharraz/Test1.java&quot;}]},&quot;isHidden&quot;:false},{&quot;type&quot;:&quot;toolCall&quot;,&quot;toolCallId&quot;:&quot;call_ant376jtTYTEux0T85f6fQEy&quot;,&quot;statusText&quot;:&quot;Viewed file (lines 1:5)&quot;,&quot;status&quot;:&quot;SUCCESS&quot;,&quot;context&quot;:{&quot;files&quot;:[{&quot;path&quot;:&quot;src/main/java/ma/emsi/kharraz/Test3.java&quot;,&quot;fsPath&quot;:&quot;C:/Users/ProBook/Documents/Projets IntelliJ IDEA/AI/TPs Casablanca/tp2testkharraz/src/main/java/ma/emsi/kharraz/Test3.java&quot;}]},&quot;isHidden&quot;:false},{&quot;type&quot;:&quot;thought&quot;,&quot;text&quot;:&quot;**Preparing to implement Test3 class**&quot;},{&quot;type&quot;:&quot;toolCall&quot;,&quot;toolCallId&quot;:&quot;call_Tba7bZI9bK7h6xdMJGoROo7c&quot;,&quot;title&quot;:&quot;Fulltext search&quot;,&quot;statusText&quot;:&quot;Done&quot;,&quot;status&quot;:&quot;SUCCESS&quot;,&quot;isHidden&quot;:false},{&quot;type&quot;:&quot;thought&quot;,&quot;text&quot;:&quot;**Choosing embedding model and builder methods**&quot;},{&quot;type&quot;:&quot;toolCall&quot;,&quot;toolCallId&quot;:&quot;call_jNv9LVywHxjOLdwMr6uwBIYE&quot;,&quot;title&quot;:&quot;Web search&quot;,&quot;statusText&quot;:&quot;Done&quot;,&quot;status&quot;:&quot;SUCCESS&quot;,&quot;isHidden&quot;:false},{&quot;type&quot;:&quot;toolCall&quot;,&quot;toolCallId&quot;:&quot;call_6vasPRaYCUgqZOIOSHjsvptM&quot;,&quot;title&quot;:&quot;Web search&quot;,&quot;statusText&quot;:&quot;Done&quot;,&quot;status&quot;:&quot;SUCCESS&quot;,&quot;isHidden&quot;:false},{&quot;type&quot;:&quot;thought&quot;,&quot;text&quot;:&quot;**Requesting more details about class**&quot;},{&quot;type&quot;:&quot;toolCall&quot;,&quot;toolCallId&quot;:&quot;call_xuaymGaGpGS9Mni6nXiZ9biQ&quot;,&quot;title&quot;:&quot;Web search&quot;,&quot;statusText&quot;:&quot;Done&quot;,&quot;status&quot;:&quot;SUCCESS&quot;,&quot;isHidden&quot;:false},{&quot;type&quot;:&quot;toolCall&quot;,&quot;toolCallId&quot;:&quot;call_pn6hFzoKTjwmS9JK2QDXJy5e&quot;,&quot;statusText&quot;:&quot;Viewed file (lines 1:5)&quot;,&quot;status&quot;:&quot;SUCCESS&quot;,&quot;context&quot;:{&quot;files&quot;:[{&quot;path&quot;:&quot;src/main/java/ma/emsi/kharraz/Test3.java&quot;,&quot;fsPath&quot;:&quot;C:/Users/ProBook/Documents/Projets IntelliJ IDEA/AI/TPs Casablanca/tp2testkharraz/src/main/java/ma/emsi/kharraz/Test3.java&quot;}]},&quot;isHidden&quot;:false},{&quot;type&quot;:&quot;thought&quot;,&quot;text&quot;:&quot;**Designing embedding generator with builder pattern**&quot;},{&quot;type&quot;:&quot;toolCall&quot;,&quot;toolCallId&quot;:&quot;call_3heIWouT9UsLZhYW6fuhR2hb&quot;,&quot;title&quot;:&quot;Web search&quot;,&quot;statusText&quot;:&quot;Done&quot;,&quot;status&quot;:&quot;SUCCESS&quot;,&quot;isHidden&quot;:false},{&quot;type&quot;:&quot;thought&quot;,&quot;text&quot;:&quot;**Planning embedding implementation**\n\nI’m gathering details to implement a Test3 class for semantic similarity using LangChain4j’s GoogleAiEmbeddingModel builder. I want to confirm method names and usage by checking docs and the jar, aiming to set API key, model name, task type, and timeout properly. I’m also figuring out how to extract embedding vectors and calculate cosine similarity from the returned embeddings, verifying method signatures and data types carefully. Let’s explore this together!&quot;},{&quot;type&quot;:&quot;toolCall&quot;,&quot;toolCallId&quot;:&quot;call_HpZ1gc4fDigSvWv3JxtCg5md&quot;,&quot;title&quot;:&quot;Web search&quot;,&quot;statusText&quot;:&quot;Done&quot;,&quot;status&quot;:&quot;SUCCESS&quot;,&quot;isHidden&quot;:false},{&quot;type&quot;:&quot;toolCall&quot;,&quot;toolCallId&quot;:&quot;call_JSiRCx1A5AiifyWdmA2fWJGU&quot;,&quot;title&quot;:&quot;Web search&quot;,&quot;statusText&quot;:&quot;Done&quot;,&quot;status&quot;:&quot;SUCCESS&quot;,&quot;isHidden&quot;:false},{&quot;type&quot;:&quot;toolCall&quot;,&quot;toolCallId&quot;:&quot;call_E9dMI9wM2SMb0Ya929v9Sqpi&quot;,&quot;statusText&quot;:&quot;Change generated&quot;,&quot;status&quot;:&quot;SUCCESS&quot;,&quot;context&quot;:{&quot;files&quot;:[{&quot;path&quot;:&quot;src/main/java/ma/emsi/kharraz/Test3.java&quot;,&quot;fsPath&quot;:&quot;C:/Users/ProBook/Documents/Projets IntelliJ IDEA/AI/TPs Casablanca/tp2testkharraz/src/main/java/ma/emsi/kharraz/Test3.java&quot;}]},&quot;isHidden&quot;:false},{&quot;type&quot;:&quot;codeHunk&quot;,&quot;lineBasedDiff&quot;:&quot;--- C:/Users/ProBook/Documents/Projets IntelliJ IDEA/AI/TPs Casablanca/tp2testkharraz/src/main/java/ma/emsi/kharraz/Test3.java\n+++ C:/Users/ProBook/Documents/Projets IntelliJ IDEA/AI/TPs Casablanca/tp2testkharraz/src/main/java/ma/emsi/kharraz/Test3.java\n@@ -1,4 +1,105 @@\n package ma.emsi.kharraz;\n \n+import dev.langchain4j.data.embedding.Embedding;\n+import dev.langchain4j.data.embedding.EmbeddingMatch;\n+import dev.langchain4j.data.embedding.EmbeddingMatchResult;\n+import dev.langchain4j.model.embedding.EmbeddingModel;\n+import dev.langchain4j.model.embedding.TaskType;\n+import dev.langchain4j.model.googleai.GoogleAiEmbeddingModel;\n+import dev.langchain4j.store.embedding.EmbeddingStore;\n+import dev.langchain4j.store.embedding.InMemoryEmbeddingStore;\n+\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.List;\n+\n public class Test3 {\n+\n+    private static final String GEMINI_KEY_ENV = \&quot;GEMINI_KEY\&quot;;\n+\n+    public static void main(String[] args) {\n+        String apiKey = System.getenv(GEMINI_KEY_ENV);\n+        if (apiKey == null || apiKey.isBlank()) {\n+            System.err.println(\&quot;La clé GEMINI_KEY est introuvable dans les variables d'environnement.\&quot;);\n+            return;\n+        }\n+\n+        EmbeddingModel embeddingModel = GoogleAiEmbeddingModel.builder()\n+                .apiKey(apiKey)\n+                .modelName(\&quot;text-embedding-004\&quot;)\n+                .taskType(TaskType.SEMANTIC_SIMILARITY)\n+                .dimensions(300)\n+                .timeout(Duration.ofMillis(100))\n+                .build();\n+\n+        List&lt;String[]&gt; sentencePairs = Arrays.asList(\n+                new String[]{\&quot;Les chats aiment dormir au soleil.\&quot;, \&quot;Les félins apprécient se prélasser dans la lumière.\&quot;},\n+                new String[]{\&quot;Je vais acheter du pain à la boulangerie.\&quot;, \&quot;Je suis en retard pour la réunion.\&quot;},\n+                new String[]{\&quot;Le ciel est bleu aujourd'hui.\&quot;, \&quot;Aujourd'hui, le ciel paraît dégagé et azur.\&quot;},\n+                new String[]{\&quot;Il pleut beaucoup dans cette région.\&quot;, \&quot;Cette région est très ensoleillée.\&quot;}\n+        );\n+\n+        EmbeddingStore&lt;Embedding&gt; embeddingStore = new InMemoryEmbeddingStore&lt;&gt;();\n+\n+        for (int i = 0; i &lt; sentencePairs.size(); i++) {\n+            String[] pair = sentencePairs.get(i);\n+            List&lt;Embedding&gt; embeddings = embeddingModel.embedAll(Arrays.asList(pair[0], pair[1])).content();\n+            Embedding firstEmbedding = embeddings.get(0);\n+            Embedding secondEmbedding = embeddings.get(1);\n+\n+            embeddingStore.add(firstEmbedding);\n+            embeddingStore.add(secondEmbedding);\n+\n+            double cosineSimilarity = cosineSimilarity(firstEmbedding, secondEmbedding);\n+\n+            System.out.printf(\&quot;Paire %d:%n\&quot;, i + 1);\n+            System.out.printf(\&quot;\\tPhrase A: %s%n\&quot;, pair[0]);\n+            System.out.printf(\&quot;\\tPhrase B: %s%n\&quot;, pair[1]);\n+            System.out.printf(\&quot;\\tSimilarité cosinus: %.4f%n%n\&quot;, cosineSimilarity);\n+        }\n+\n+        List&lt;String&gt; queries = Arrays.asList(\n+                \&quot;Les chats aiment la chaleur du soleil\&quot;,\n+                \&quot;Il faut que je me dépêche pour la réunion\&quot;,\n+                \&quot;Le temps est vraiment couvert aujourd'hui\&quot;\n+        );\n+\n+        for (String query : queries) {\n+            Embedding queryEmbedding = embeddingModel.embed(query).content();\n+            EmbeddingMatchResult&lt;Embedding&gt; matchResult = embeddingStore.findRelevant(queryEmbedding, 2);\n+\n+            System.out.printf(\&quot;Requête: %s%n\&quot;, query);\n+            for (EmbeddingMatch&lt;Embedding&gt; match : matchResult.matches()) {\n+                System.out.printf(\&quot;\\tSimilarité: %.4f%n\&quot;, match.score());\n+            }\n+            System.out.println();\n+        }\n+    }\n+\n+    private static double cosineSimilarity(Embedding embeddingA, Embedding embeddingB) {\n+        List&lt;Double&gt; vectorA = embeddingA.vectorAsList();\n+        List&lt;Double&gt; vectorB = embeddingB.vectorAsList();\n+\n+        double dotProduct = 0.0;\n+        double magnitudeA = 0.0;\n+        double magnitudeB = 0.0;\n+\n+        for (int i = 0; i &lt; vectorA.size(); i++) {\n+            double valueA = vectorA.get(i);\n+            double valueB = vectorB.get(i);\n+\n+            dotProduct += valueA * valueB;\n+            magnitudeA += valueA * valueA;\n+            magnitudeB += valueB * valueB;\n+        }\n+\n+        magnitudeA = Math.sqrt(magnitudeA);\n+        magnitudeB = Math.sqrt(magnitudeB);\n+\n+        if (magnitudeA == 0.0 || magnitudeB == 0.0) {\n+            return 0.0;\n+        }\n+\n+        return dotProduct / (magnitudeA * magnitudeB);\n+    }\n }&quot;,&quot;refToolCallId&quot;:&quot;call_E9dMI9wM2SMb0Ya929v9Sqpi&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;# Classe `Test3`\n\n## Présentation rapide\nLa classe `Test3` illustre comment :\n1. **Configurer un modèle d'embeddings Gemini** avec LangChain4j (pattern *builder*).\n2. **Générer des vecteurs** pour plusieurs couples de phrases.\n3. **Comparer leur similarité cosinus** et évaluer quelques requêtes.\n\n## Code actuel\n```java\npackage ma.emsi.kharraz;\n\nimport dev.langchain4j.data.embedding.Embedding;\nimport dev.langchain4j.data.embedding.EmbeddingMatch;\nimport dev.langchain4j.data.embedding.EmbeddingMatchResult;\nimport dev.langchain4j.model.embedding.EmbeddingModel;\nimport dev.langchain4j.model.embedding.TaskType;\nimport dev.langchain4j.model.googleai.GoogleAiEmbeddingModel;\nimport dev.langchain4j.store.embedding.EmbeddingStore;\nimport dev.langchain4j.store.embedding.InMemoryEmbeddingStore;\n\nimport java.time.Duration;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class Test3 {\n\n    private static final String GEMINI_KEY_ENV = \&quot;GEMINI_KEY\&quot;;\n\n    public static void main(String[] args) {\n        String apiKey = System.getenv(GEMINI_KEY_ENV);\n        if (apiKey == null || apiKey.isBlank()) {\n            System.err.println(\&quot;La clé GEMINI_KEY est introuvable dans les variables d'environnement.\&quot;);\n            return;\n        }\n\n        // Création du modèle d'embeddings (pattern builder)\n        EmbeddingModel embeddingModel = GoogleAiEmbeddingModel.builder()\n                .apiKey(apiKey)\n                .modelName(\&quot;text-embedding-004\&quot;)               // Nom du modèle (après \&quot;models/\&quot;)\n                .taskType(TaskType.SEMANTIC_SIMILARITY)        // Type de tâche adapté aux similarités\n                .dimensions(300)                               // Dimension cible (peut être ajustée)\n                .timeout(Duration.ofMillis(100))               // Timeout initial (augmentez si nécessaire)\n                .build();\n\n        // Différents couples de phrases à comparer\n        List&lt;String[]&gt; sentencePairs = Arrays.asList(\n                new String[]{\&quot;Les chats aiment dormir au soleil.\&quot;, \&quot;Les félins apprécient se prélasser dans la lumière.\&quot;},\n                new String[]{\&quot;Je vais acheter du pain à la boulangerie.\&quot;, \&quot;Je suis en retard pour la réunion.\&quot;},\n                new String[]{\&quot;Le ciel est bleu aujourd'hui.\&quot;, \&quot;Aujourd'hui, le ciel paraît dégagé et azur.\&quot;},\n                new String[]{\&quot;Il pleut beaucoup dans cette région.\&quot;, \&quot;Cette région est très ensoleillée.\&quot;}\n        );\n\n        EmbeddingStore&lt;Embedding&gt; embeddingStore = new InMemoryEmbeddingStore&lt;&gt;();\n\n        for (int i = 0; i &lt; sentencePairs.size(); i++) {\n            String[] pair = sentencePairs.get(i);\n            List&lt;Embedding&gt; embeddings = embeddingModel.embedAll(Arrays.asList(pair[0], pair[1])).content();\n            Embedding firstEmbedding = embeddings.get(0);\n            Embedding secondEmbedding = embeddings.get(1);\n\n            embeddingStore.add(firstEmbedding);\n            embeddingStore.add(secondEmbedding);\n\n            double cosineSimilarity = cosineSimilarity(firstEmbedding, secondEmbedding);\n\n            System.out.printf(\&quot;Paire %d:%n\&quot;, i + 1);\n            System.out.printf(\&quot;\\tPhrase A: %s%n\&quot;, pair[0]);\n            System.out.printf(\&quot;\\tPhrase B: %s%n\&quot;, pair[1]);\n            System.out.printf(\&quot;\\tSimilarité cosinus: %.4f%n%n\&quot;, cosineSimilarity);\n        }\n\n        // Queries supplémentaires pour retrouver les plus proches\n        List&lt;String&gt; queries = Arrays.asList(\n                \&quot;Les chats aiment la chaleur du soleil\&quot;,\n                \&quot;Il faut que je me dépêche pour la réunion\&quot;,\n                \&quot;Le temps est vraiment couvert aujourd'hui\&quot;\n        );\n\n        for (String query : queries) {\n            Embedding queryEmbedding = embeddingModel.embed(query).content();\n            EmbeddingMatchResult&lt;Embedding&gt; matchResult = embeddingStore.findRelevant(queryEmbedding, 2);\n\n            System.out.printf(\&quot;Requête: %s%n\&quot;, query);\n            for (EmbeddingMatch&lt;Embedding&gt; match : matchResult.matches()) {\n                System.out.printf(\&quot;\\tSimilarité: %.4f%n\&quot;, match.score());\n            }\n            System.out.println();\n        }\n    }\n\n    // Calcul de la similarité cosinus entre deux embeddings\n    private static double cosineSimilarity(Embedding embeddingA, Embedding embeddingB) {\n        List&lt;Double&gt; vectorA = embeddingA.vectorAsList();\n        List&lt;Double&gt; vectorB = embeddingB.vectorAsList();\n\n        double dotProduct = 0.0;\n        double magnitudeA = 0.0;\n        double magnitudeB = 0.0;\n\n        for (int i = 0; i &lt; vectorA.size(); i++) {\n            double valueA = vectorA.get(i);\n            double valueB = vectorB.get(i);\n\n            dotProduct += valueA * valueB;\n            magnitudeA += valueA * valueA;\n            magnitudeB += valueB * valueB;\n        }\n\n        magnitudeA = Math.sqrt(magnitudeA);\n        magnitudeB = Math.sqrt(magnitudeB);\n\n        if (magnitudeA == 0.0 || magnitudeB == 0.0) {\n            return 0.0;\n        }\n\n        return dotProduct / (magnitudeA * magnitudeB);\n    }\n}\n```\n\n## Points importants\n- **Modèle** : `text-embedding-004` (l’un des plus récents pour la similarité sémantique).\n- **TaskType** : `SEMANTIC_SIMILARITY` pour des embeddings optimisés sur cette tâche.\n- **Dimensions** : demande une réduction à 300 (valeur standard — à adapter si besoin).\n- **Timeout** : `Duration.ofMillis(100)` ; augmentez (ex. 500 ms ou 1 s) si vous rencontrez des délais/erreurs.\n- **Utilisation de `content()`** : extraction directe des listes d’embeddings ou d’un seul embedding.\n- **Affichage** : scores de similarité cosinus pour chaque paire et pour des requêtes de test.\n\nN’hésite pas à me dire si tu souhaites des améliorations (journalisation, configuration externe du modèle, gestion d’erreurs plus précise, etc.).&quot;},{&quot;type&quot;:&quot;codePatch&quot;,&quot;diffs&quot;:[{&quot;path&quot;:&quot;src/main/java/ma/emsi/kharraz/Test3.java&quot;,&quot;fsPath&quot;:&quot;C:/Users/ProBook/Documents/Projets IntelliJ IDEA/AI/TPs Casablanca/tp2testkharraz/src/main/java/ma/emsi/kharraz/Test3.java&quot;,&quot;patch&quot;:&quot;@@ -25,28 +25,4270 @@\n %0D%0A%0D%0A\n-public class Test3 %7B\n+import dev.langchain4j.data.embedding.Embedding;%0D%0Aimport dev.langchain4j.data.embedding.EmbeddingMatch;%0D%0Aimport dev.langchain4j.data.embedding.EmbeddingMatchResult;%0D%0Aimport dev.langchain4j.model.embedding.EmbeddingModel;%0D%0Aimport dev.langchain4j.model.embedding.TaskType;%0D%0Aimport dev.langchain4j.model.googleai.GoogleAiEmbeddingModel;%0D%0Aimport dev.langchain4j.store.embedding.EmbeddingStore;%0D%0Aimport dev.langchain4j.store.embedding.InMemoryEmbeddingStore;%0D%0A%0D%0Aimport java.time.Duration;%0D%0Aimport java.util.Arrays;%0D%0Aimport java.util.List;%0D%0A%0D%0Apublic class Test3 %7B%0D%0A%0D%0A    private static final String GEMINI_KEY_ENV = %22GEMINI_KEY%22;%0D%0A%0D%0A    public static void main(String%5B%5D args) %7B%0D%0A        String apiKey = System.getenv(GEMINI_KEY_ENV);%0D%0A        if (apiKey == null %7C%7C apiKey.isBlank()) %7B%0D%0A            System.err.println(%22La cl%C3%A9 GEMINI_KEY est introuvable dans les variables d'environnement.%22);%0D%0A            return;%0D%0A        %7D%0D%0A%0D%0A        EmbeddingModel embeddingModel = GoogleAiEmbeddingModel.builder()%0D%0A                .apiKey(apiKey)%0D%0A                .modelName(%22text-embedding-004%22)%0D%0A                .taskType(TaskType.SEMANTIC_SIMILARITY)%0D%0A                .dimensions(300)%0D%0A                .timeout(Duration.ofMillis(100))%0D%0A                .build();%0D%0A%0D%0A        List%3CString%5B%5D%3E sentencePairs = Arrays.asList(%0D%0A                new String%5B%5D%7B%22Les chats aiment dormir au soleil.%22, %22Les f%C3%A9lins appr%C3%A9cient se pr%C3%A9lasser dans la lumi%C3%A8re.%22%7D,%0D%0A                new String%5B%5D%7B%22Je vais acheter du pain %C3%A0 la boulangerie.%22, %22Je suis en retard pour la r%C3%A9union.%22%7D,%0D%0A                new String%5B%5D%7B%22Le ciel est bleu aujourd'hui.%22, %22Aujourd'hui, le ciel para%C3%AEt d%C3%A9gag%C3%A9 et azur.%22%7D,%0D%0A                new String%5B%5D%7B%22Il pleut beaucoup dans cette r%C3%A9gion.%22, %22Cette r%C3%A9gion est tr%C3%A8s ensoleill%C3%A9e.%22%7D%0D%0A        );%0D%0A%0D%0A        EmbeddingStore%3CEmbedding%3E embeddingStore = new InMemoryEmbeddingStore%3C%3E();%0D%0A%0D%0A        for (int i = 0; i %3C sentencePairs.size(); i++) %7B%0D%0A            String%5B%5D pair = sentencePairs.get(i);%0D%0A            List%3CEmbedding%3E embeddings = embeddingModel.embedAll(Arrays.asList(pair%5B0%5D, pair%5B1%5D)).content();%0D%0A            Embedding firstEmbedding = embeddings.get(0);%0D%0A            Embedding secondEmbedding = embeddings.get(1);%0D%0A%0D%0A            embeddingStore.add(firstEmbedding);%0D%0A            embeddingStore.add(secondEmbedding);%0D%0A%0D%0A            double cosineSimilarity = cosineSimilarity(firstEmbedding, secondEmbedding);%0D%0A%0D%0A            System.out.printf(%22Paire %25d:%25n%22, i + 1);%0D%0A            System.out.printf(%22%5CtPhrase A: %25s%25n%22, pair%5B0%5D);%0D%0A            System.out.printf(%22%5CtPhrase B: %25s%25n%22, pair%5B1%5D);%0D%0A            System.out.printf(%22%5CtSimilarit%C3%A9 cosinus: %25.4f%25n%25n%22, cosineSimilarity);%0D%0A        %7D%0D%0A%0D%0A        List%3CString%3E queries = Arrays.asList(%0D%0A                %22Les chats aiment la chaleur du soleil%22,%0D%0A                %22Il faut que je me d%C3%A9p%C3%AAche pour la r%C3%A9union%22,%0D%0A                %22Le temps est vraiment couvert aujourd'hui%22%0D%0A        );%0D%0A%0D%0A        for (String query : queries) %7B%0D%0A            Embedding queryEmbedding = embeddingModel.embed(query).content();%0D%0A            EmbeddingMatchResult%3CEmbedding%3E matchResult = embeddingStore.findRelevant(queryEmbedding, 2);%0D%0A%0D%0A            System.out.printf(%22Requ%C3%AAte: %25s%25n%22, query);%0D%0A            for (EmbeddingMatch%3CEmbedding%3E match : matchResult.matches()) %7B%0D%0A                System.out.printf(%22%5CtSimilarit%C3%A9: %25.4f%25n%22, match.score());%0D%0A            %7D%0D%0A            System.out.println();%0D%0A        %7D%0D%0A    %7D%0D%0A%0D%0A    private static double cosineSimilarity(Embedding embeddingA, Embedding embeddingB) %7B%0D%0A        List%3CDouble%3E vectorA = embeddingA.vectorAsList();%0D%0A        List%3CDouble%3E vectorB = embeddingB.vectorAsList();%0D%0A%0D%0A        double dotProduct = 0.0;%0D%0A        double magnitudeA = 0.0;%0D%0A        double magnitudeB = 0.0;%0D%0A%0D%0A        for (int i = 0; i %3C vectorA.size(); i++) %7B%0D%0A            double valueA = vectorA.get(i);%0D%0A            double valueB = vectorB.get(i);%0D%0A%0D%0A            dotProduct += valueA * valueB;%0D%0A            magnitudeA += valueA * valueA;%0D%0A            magnitudeB += valueB * valueB;%0D%0A        %7D%0D%0A%0D%0A        magnitudeA = Math.sqrt(magnitudeA);%0D%0A        magnitudeB = Math.sqrt(magnitudeB);%0D%0A%0D%0A        if (magnitudeA == 0.0 %7C%7C magnitudeB == 0.0) %7B%0D%0A            return 0.0;%0D%0A        %7D%0D%0A%0D%0A        return dotProduct / (magnitudeA * magnitudeB);%0D%0A    %7D\n %0D%0A%7D%0D\n&quot;,&quot;isNew&quot;:false,&quot;isApplied&quot;:true,&quot;isUnread&quot;:true,&quot;timestamp&quot;:1761854646847}]}],&quot;context&quot;:{&quot;author&quot;:&quot;Code agent&quot;,&quot;operationId&quot;:&quot;5ca5f5e9-05f4-469a-aa4c-507a5291e20d&quot;,&quot;usageStatistics&quot;:{&quot;llmCallsUsedForAnswer&quot;:23.0,&quot;llmCallsUsedTotal&quot;:23.0,&quot;llmCallsLimit&quot;:30.0,&quot;limitRenewalMillisecondTimestamp&quot;:1761940839830}},&quot;createdAt&quot;:1761854469708,&quot;isInternal&quot;:false},{&quot;id&quot;:&quot;ffd61c37-f587-4b99-8e73-e32c2025c396&quot;,&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Le programme utilise un modèle d'embeddings pour générer 2 embeddings de 2 phrases et ensuite calculer leur similarité par la métrique du cosinus.&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Une des difficultés est de trouver le bon nom de modèle pour les embeddings. La liste des noms de modèles pour Gemini peut être obtenue en tapant cet URL dans un navigateur : https://generativelanguage.googleapis.com/v1beta/models?key=AIzuuyDTjkuPHjBY... (collez ici votre clé Gemini). Attention, le nom du modèle à mettre dans le code est le nom qui est après \&quot;models/\&quot; dans la liste des modèles. Pour faire le meilleur choix, vous pouvez faire une recherche sur le Web, par exemple sur https://huggingface.co/spaces/mteb/leaderboard, aller sur le site de l'API Gemini, ou demander à une IA.&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Ensuite, allez voir l'interface EmbeddingModel et la classe GoogleAiEmbeddingModel dans la javadoc de LangChain4j. Utilisez le design pattern \&quot;builder\&quot; pour créer une instance de GoogleAiEmbeddingModel. Pour le type de tâche, choisissez TaskType.SEMANTIC_SIMILARITY puiqu'on veut calculer une similarité. Pour la dimension des vecteurs d'embeddings, choisissez par exemple 300. Pour la durée du timeout, utilisez la classe Duration du JDK ; essayez 100 ms et augmentez si ça ne suffit pas.&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Donnez plusieurs couples de phrases, similaires ou pas, pour voir la similarité (plus elle est proche de 1, meilleur elle est).&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Pour récupérer les embeddings à partir des réponses du modèle d'embeddings, utilisez la méthode content().&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Pour calculer la similarité, utilisez la classe CosineSimilarity (cherchez dans la javadoc ou le support de cours).&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Optimize ce code en utlisant la classe CosineSimilarity pour calcluer le cosinus&quot;}],&quot;context&quot;:{&quot;currentFile&quot;:{&quot;path&quot;:&quot;src/main/java/ma/emsi/kharraz/Test3.java&quot;,&quot;fsPath&quot;:&quot;C:/Users/ProBook/Documents/Projets IntelliJ IDEA/AI/TPs Casablanca/tp2testkharraz/src/main/java/ma/emsi/kharraz/Test3.java&quot;,&quot;sources&quot;:[&quot;opened_tab&quot;],&quot;content&quot;:&quot;package ma.emsi.kharraz;\n\nimport dev.langchain4j.data.embedding.Embedding;\nimport dev.langchain4j.data.embedding.EmbeddingMatch;\nimport dev.langchain4j.data.embedding.EmbeddingMatchResult;\nimport dev.langchain4j.model.embedding.EmbeddingModel;\nimport dev.langchain4j.model.embedding.TaskType;\nimport dev.langchain4j.model.googleai.GoogleAiEmbeddingModel;\nimport dev.langchain4j.store.embedding.EmbeddingStore;\nimport dev.langchain4j.store.embedding.InMemoryEmbeddingStore;\n\nimport java.time.Duration;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class Test3 {\n\n    private static final String GEMINI_KEY_ENV = \&quot;GEMINI_KEY\&quot;;\n\n    public static void main(String[] args) {\n        String apiKey = System.getenv(GEMINI_KEY_ENV);\n        if (apiKey == null || apiKey.isBlank()) {\n            System.err.println(\&quot;La clé GEMINI_KEY est introuvable dans les variables d'environnement.\&quot;);\n            return;\n        }\n\n        EmbeddingModel embeddingModel = GoogleAiEmbeddingModel.builder()\n                .apiKey(apiKey)\n                .modelName(\&quot;text-embedding-004\&quot;)\n                .taskType(GoogleAiEmbeddingModel.TaskType.SEMANTIC_SIMILARITY)\n                .outputDimensionality(300)\n                .timeout(Duration.ofMillis(100))\n                .build();\n\n        List&lt;String[]&gt; sentencePairs = Arrays.asList(\n                new String[]{\&quot;Les chats aiment dormir au soleil.\&quot;, \&quot;Les félins apprécient se prélasser dans la lumière.\&quot;},\n                new String[]{\&quot;Je vais acheter du pain à la boulangerie.\&quot;, \&quot;Je suis en retard pour la réunion.\&quot;},\n                new String[]{\&quot;Le ciel est bleu aujourd'hui.\&quot;, \&quot;Aujourd'hui, le ciel paraît dégagé et azur.\&quot;},\n                new String[]{\&quot;Il pleut beaucoup dans cette région.\&quot;, \&quot;Cette région est très ensoleillée.\&quot;}\n        );\n\n        EmbeddingStore&lt;Embedding&gt; embeddingStore = new InMemoryEmbeddingStore&lt;&gt;();\n\n        for (int i = 0; i &lt; sentencePairs.size(); i++) {\n            String[] pair = sentencePairs.get(i);\n            List&lt;Embedding&gt; embeddings = embeddingModel.embedAll(Arrays.asList(pair[0], pair[1])).content();\n            Embedding firstEmbedding = embeddings.get(0);\n            Embedding secondEmbedding = embeddings.get(1);\n\n            embeddingStore.add(firstEmbedding);\n            embeddingStore.add(secondEmbedding);\n\n            double cosineSimilarity = cosineSimilarity(firstEmbedding, secondEmbedding);\n\n            System.out.printf(\&quot;Paire %d:%n\&quot;, i + 1);\n            System.out.printf(\&quot;\\tPhrase A: %s%n\&quot;, pair[0]);\n            System.out.printf(\&quot;\\tPhrase B: %s%n\&quot;, pair[1]);\n            System.out.printf(\&quot;\\tSimilarité cosinus: %.4f%n%n\&quot;, cosineSimilarity);\n        }\n\n        List&lt;String&gt; queries = Arrays.asList(\n                \&quot;Les chats aiment la chaleur du soleil\&quot;,\n                \&quot;Il faut que je me dépêche pour la réunion\&quot;,\n                \&quot;Le temps est vraiment couvert aujourd'hui\&quot;\n        );\n\n        for (String query : queries) {\n            Embedding queryEmbedding = embeddingModel.embed(query).content();\n            EmbeddingMatchResult&lt;Embedding&gt; matchResult = embeddingStore.findRelevant(queryEmbedding, 2);\n\n            System.out.printf(\&quot;Requête: %s%n\&quot;, query);\n            for (EmbeddingMatch&lt;Embedding&gt; match : matchResult.matches()) {\n                System.out.printf(\&quot;\\tSimilarité: %.4f%n\&quot;, match.score());\n            }\n            System.out.println();\n        }\n    }\n\n    private static double cosineSimilarity(Embedding embeddingA, Embedding embeddingB) {\n        List&lt;Double&gt; vectorA = embeddingA.vectorAsList();\n        List&lt;Double&gt; vectorB = embeddingB.vectorAsList();\n\n        double dotProduct = 0.0;\n        double magnitudeA = 0.0;\n        double magnitudeB = 0.0;\n\n        for (int i = 0; i &lt; vectorA.size(); i++) {\n            double valueA = vectorA.get(i);\n            double valueB = vectorB.get(i);\n\n            dotProduct += valueA * valueB;\n            magnitudeA += valueA * valueA;\n            magnitudeB += valueB * valueB;\n        }\n\n        magnitudeA = Math.sqrt(magnitudeA);\n        magnitudeB = Math.sqrt(magnitudeB);\n\n        if (magnitudeA == 0.0 || magnitudeB == 0.0) {\n            return 0.0;\n        }\n\n        return dotProduct / (magnitudeA * magnitudeB);\n    }\n}\n&quot;,&quot;language&quot;:&quot;java&quot;},&quot;codebaseEnabled&quot;:true},&quot;createdAt&quot;:1761855524661,&quot;isInternal&quot;:false,&quot;rawContent&quot;:{&quot;type&quot;:&quot;doc&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Le programme utilise un modèle d'embeddings pour générer 2 embeddings de 2 phrases et ensuite calculer leur similarité par la métrique du cosinus.&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Une des difficultés est de trouver le bon nom de modèle pour les embeddings. La liste des noms de modèles pour Gemini peut être obtenue en tapant cet URL dans un navigateur : https://generativelanguage.googleapis.com/v1beta/models?key=AIzuuyDTjkuPHjBY... (collez ici votre clé Gemini). Attention, le nom du modèle à mettre dans le code est le nom qui est après \&quot;models/\&quot; dans la liste des modèles. Pour faire le meilleur choix, vous pouvez faire une recherche sur le Web, par exemple sur https://huggingface.co/spaces/mteb/leaderboard, aller sur le site de l'API Gemini, ou demander à une IA.&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Ensuite, allez voir l'interface EmbeddingModel et la classe GoogleAiEmbeddingModel dans la javadoc de LangChain4j. Utilisez le design pattern \&quot;builder\&quot; pour créer une instance de GoogleAiEmbeddingModel. Pour le type de tâche, choisissez TaskType.SEMANTIC_SIMILARITY puiqu'on veut calculer une similarité. Pour la dimension des vecteurs d'embeddings, choisissez par exemple 300. Pour la durée du timeout, utilisez la classe Duration du JDK ; essayez 100 ms et augmentez si ça ne suffit pas.&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Donnez plusieurs couples de phrases, similaires ou pas, pour voir la similarité (plus elle est proche de 1, meilleur elle est).&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Pour récupérer les embeddings à partir des réponses du modèle d'embeddings, utilisez la méthode content().&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Pour calculer la similarité, utilisez la classe CosineSimilarity (cherchez dans la javadoc ou le support de cours).&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Optimize ce code en utlisant la classe CosineSimilarity pour calcluer le cosinus&quot;}]}]},&quot;autoAppliedRules&quot;:[]},{&quot;id&quot;:&quot;348fe0e4-1bfa-4591-aa22-13e01ac1dd21&quot;,&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;thought&quot;,&quot;text&quot;:&quot;**Verifying TaskType and similarity utility usage**&quot;},{&quot;type&quot;:&quot;toolCall&quot;,&quot;toolCallId&quot;:&quot;call_xTmu51ibTyNgc9AXc3u6PwTE&quot;,&quot;title&quot;:&quot;Fulltext search&quot;,&quot;statusText&quot;:&quot;Done&quot;,&quot;status&quot;:&quot;SUCCESS&quot;,&quot;isHidden&quot;:false},{&quot;type&quot;:&quot;toolCall&quot;,&quot;toolCallId&quot;:&quot;call_dUBVslLPQv5AjyJ1KSqbEaOI&quot;,&quot;title&quot;:&quot;Fulltext search&quot;,&quot;statusText&quot;:&quot;Done&quot;,&quot;status&quot;:&quot;SUCCESS&quot;,&quot;isHidden&quot;:false},{&quot;type&quot;:&quot;thought&quot;,&quot;text&quot;:&quot;**Searching for CosineSimilarity class**&quot;},{&quot;type&quot;:&quot;toolCall&quot;,&quot;toolCallId&quot;:&quot;call_9M3cFpEypBAgs8sQnbvlMEHK&quot;,&quot;title&quot;:&quot;Fulltext search&quot;,&quot;statusText&quot;:&quot;Failed&quot;,&quot;status&quot;:&quot;ERROR&quot;,&quot;isHidden&quot;:false},{&quot;type&quot;:&quot;thought&quot;,&quot;text&quot;:&quot;**Investigating cosine similarity import**&quot;},{&quot;type&quot;:&quot;toolCall&quot;,&quot;toolCallId&quot;:&quot;call_9eSwUa39xn34PHwtMzQxHRW1&quot;,&quot;title&quot;:&quot;Web search&quot;,&quot;statusText&quot;:&quot;Done&quot;,&quot;status&quot;:&quot;SUCCESS&quot;,&quot;isHidden&quot;:false},{&quot;type&quot;:&quot;thought&quot;,&quot;text&quot;:&quot;**Verifying import paths and enum usage**&quot;},{&quot;type&quot;:&quot;toolCall&quot;,&quot;toolCallId&quot;:&quot;call_o33j5KSxEd2KeI8CxC6CEQsV&quot;,&quot;title&quot;:&quot;Web search&quot;,&quot;statusText&quot;:&quot;Done&quot;,&quot;status&quot;:&quot;SUCCESS&quot;,&quot;isHidden&quot;:false},{&quot;type&quot;:&quot;toolCall&quot;,&quot;toolCallId&quot;:&quot;call_rJMm3YhbbL0QtBd2LeYsYZz7&quot;,&quot;title&quot;:&quot;Web search&quot;,&quot;statusText&quot;:&quot;Done&quot;,&quot;status&quot;:&quot;SUCCESS&quot;,&quot;isHidden&quot;:false},{&quot;type&quot;:&quot;thought&quot;,&quot;text&quot;:&quot;**Investigating CosineSimilarity class location**&quot;},{&quot;type&quot;:&quot;toolCall&quot;,&quot;toolCallId&quot;:&quot;call_Afywreps9wN7ajaKEy7idTzr&quot;,&quot;title&quot;:&quot;Web search&quot;,&quot;statusText&quot;:&quot;Done&quot;,&quot;status&quot;:&quot;SUCCESS&quot;,&quot;isHidden&quot;:false},{&quot;type&quot;:&quot;toolCall&quot;,&quot;toolCallId&quot;:&quot;call_Yuo0LlBmhzPWEryn1eu3wPtV&quot;,&quot;statusText&quot;:&quot;Viewed file (lines 1:106)&quot;,&quot;status&quot;:&quot;SUCCESS&quot;,&quot;context&quot;:{&quot;files&quot;:[{&quot;path&quot;:&quot;src/main/java/ma/emsi/kharraz/Test3.java&quot;,&quot;fsPath&quot;:&quot;C:/Users/ProBook/Documents/Projets IntelliJ IDEA/AI/TPs Casablanca/tp2testkharraz/src/main/java/ma/emsi/kharraz/Test3.java&quot;}]},&quot;isHidden&quot;:false},{&quot;type&quot;:&quot;toolCall&quot;,&quot;toolCallId&quot;:&quot;call_bchdKvspcsKpDNtvy822KOR3&quot;,&quot;statusText&quot;:&quot;Change generated&quot;,&quot;status&quot;:&quot;SUCCESS&quot;,&quot;context&quot;:{&quot;files&quot;:[{&quot;path&quot;:&quot;src/main/java/ma/emsi/kharraz/Test3.java&quot;,&quot;fsPath&quot;:&quot;C:/Users/ProBook/Documents/Projets IntelliJ IDEA/AI/TPs Casablanca/tp2testkharraz/src/main/java/ma/emsi/kharraz/Test3.java&quot;}]},&quot;isHidden&quot;:false},{&quot;type&quot;:&quot;codeHunk&quot;,&quot;lineBasedDiff&quot;:&quot;--- C:/Users/ProBook/Documents/Projets IntelliJ IDEA/AI/TPs Casablanca/tp2testkharraz/src/main/java/ma/emsi/kharraz/Test3.java\n+++ C:/Users/ProBook/Documents/Projets IntelliJ IDEA/AI/TPs Casablanca/tp2testkharraz/src/main/java/ma/emsi/kharraz/Test3.java\n@@ -3,6 +3,7 @@\n import dev.langchain4j.data.embedding.Embedding;\n import dev.langchain4j.data.embedding.EmbeddingMatch;\n import dev.langchain4j.data.embedding.EmbeddingMatchResult;\n+import dev.langchain4j.data.embedding.CosineSimilarity;\n import dev.langchain4j.model.embedding.EmbeddingModel;\n import dev.langchain4j.model.embedding.TaskType;\n import dev.langchain4j.model.googleai.GoogleAiEmbeddingModel;&quot;,&quot;refToolCallId&quot;:&quot;call_bchdKvspcsKpDNtvy822KOR3&quot;},{&quot;type&quot;:&quot;toolCall&quot;,&quot;toolCallId&quot;:&quot;call_aILv2QCeB0kt4bfNkGkrM0EM&quot;,&quot;statusText&quot;:&quot;Change generated&quot;,&quot;status&quot;:&quot;SUCCESS&quot;,&quot;context&quot;:{&quot;files&quot;:[{&quot;path&quot;:&quot;src/main/java/ma/emsi/kharraz/Test3.java&quot;,&quot;fsPath&quot;:&quot;C:/Users/ProBook/Documents/Projets IntelliJ IDEA/AI/TPs Casablanca/tp2testkharraz/src/main/java/ma/emsi/kharraz/Test3.java&quot;}]},&quot;isHidden&quot;:false},{&quot;type&quot;:&quot;codeHunk&quot;,&quot;lineBasedDiff&quot;:&quot;--- C:/Users/ProBook/Documents/Projets IntelliJ IDEA/AI/TPs Casablanca/tp2testkharraz/src/main/java/ma/emsi/kharraz/Test3.java\n+++ C:/Users/ProBook/Documents/Projets IntelliJ IDEA/AI/TPs Casablanca/tp2testkharraz/src/main/java/ma/emsi/kharraz/Test3.java\n@@ -51,7 +51,7 @@\n             embeddingStore.add(firstEmbedding);\n             embeddingStore.add(secondEmbedding);\n \n-            double cosineSimilarity = cosineSimilarity(firstEmbedding, secondEmbedding);\n+            double cosineSimilarity = CosineSimilarity.between(firstEmbedding, secondEmbedding);\n \n             System.out.printf(\&quot;Paire %d:%n\&quot;, i + 1);\n             System.out.printf(\&quot;\\tPhrase A: %s%n\&quot;, pair[0]);&quot;,&quot;refToolCallId&quot;:&quot;call_aILv2QCeB0kt4bfNkGkrM0EM&quot;},{&quot;type&quot;:&quot;toolCall&quot;,&quot;toolCallId&quot;:&quot;call_CYjdJaNUnnHEJoiSXR9acMFU&quot;,&quot;statusText&quot;:&quot;Change generated&quot;,&quot;status&quot;:&quot;SUCCESS&quot;,&quot;context&quot;:{&quot;files&quot;:[{&quot;path&quot;:&quot;src/main/java/ma/emsi/kharraz/Test3.java&quot;,&quot;fsPath&quot;:&quot;C:/Users/ProBook/Documents/Projets IntelliJ IDEA/AI/TPs Casablanca/tp2testkharraz/src/main/java/ma/emsi/kharraz/Test3.java&quot;}]},&quot;isHidden&quot;:false},{&quot;type&quot;:&quot;codeHunk&quot;,&quot;lineBasedDiff&quot;:&quot;--- C:/Users/ProBook/Documents/Projets IntelliJ IDEA/AI/TPs Casablanca/tp2testkharraz/src/main/java/ma/emsi/kharraz/Test3.java\n+++ C:/Users/ProBook/Documents/Projets IntelliJ IDEA/AI/TPs Casablanca/tp2testkharraz/src/main/java/ma/emsi/kharraz/Test3.java\n@@ -76,31 +76,4 @@\n             System.out.println();\n         }\n     }\n-\n-    private static double cosineSimilarity(Embedding embeddingA, Embedding embeddingB) {\n-        List&lt;Double&gt; vectorA = embeddingA.vectorAsList();\n-        List&lt;Double&gt; vectorB = embeddingB.vectorAsList();\n-\n-        double dotProduct = 0.0;\n-        double magnitudeA = 0.0;\n-        double magnitudeB = 0.0;\n-\n-        for (int i = 0; i &lt; vectorA.size(); i++) {\n-            double valueA = vectorA.get(i);\n-            double valueB = vectorB.get(i);\n-\n-            dotProduct += valueA * valueB;\n-            magnitudeA += valueA * valueA;\n-            magnitudeB += valueB * valueB;\n-        }\n-\n-        magnitudeA = Math.sqrt(magnitudeA);\n-        magnitudeB = Math.sqrt(magnitudeB);\n-\n-        if (magnitudeA == 0.0 || magnitudeB == 0.0) {\n-            return 0.0;\n-        }\n-\n-        return dotProduct / (magnitudeA * magnitudeB);\n-    }\n }&quot;,&quot;refToolCallId&quot;:&quot;call_CYjdJaNUnnHEJoiSXR9acMFU&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;# Optimisation réalisée\n\n## CosineSimilarity intégré\n- **Import ajouté** : `dev.langchain4j.data.embedding.CosineSimilarity`.\n- **Utilisation directe** : remplacement du calcul manuel par `CosineSimilarity.between(firstEmbedding, secondEmbedding)`.\n\n## Résultat\nLa classe `Test3` bénéficie désormais d’un code plus **lisible**, **concis** et **fiable**, tout en respectant l’API officielle de LangChain4j pour la similarité cosinus.&quot;},{&quot;type&quot;:&quot;codePatch&quot;,&quot;diffs&quot;:[{&quot;path&quot;:&quot;src/main/java/ma/emsi/kharraz/Test3.java&quot;,&quot;fsPath&quot;:&quot;C:/Users/ProBook/Documents/Projets IntelliJ IDEA/AI/TPs Casablanca/tp2testkharraz/src/main/java/ma/emsi/kharraz/Test3.java&quot;,&quot;patch&quot;:&quot;@@ -187,16 +187,73 @@\n esult;%0D%0A\n+import dev.langchain4j.data.embedding.CosineSimilarity;%0D%0A\n import d\n@@ -2449,17 +2449,17 @@\n arity = \n-c\n+C\n osineSim\n@@ -2465,16 +2465,24 @@\n milarity\n+.between\n (firstEm\n@@ -3533,861 +3533,8 @@\n   %7D%0D\n-%0A%0D%0A    private static double cosineSimilarity(Embedding embeddingA, Embedding embeddingB) %7B%0D%0A        List%3CDouble%3E vectorA = embeddingA.vectorAsList();%0D%0A        List%3CDouble%3E vectorB = embeddingB.vectorAsList();%0D%0A%0D%0A        double dotProduct = 0.0;%0D%0A        double magnitudeA = 0.0;%0D%0A        double magnitudeB = 0.0;%0D%0A%0D%0A        for (int i = 0; i %3C vectorA.size(); i++) %7B%0D%0A            double valueA = vectorA.get(i);%0D%0A            double valueB = vectorB.get(i);%0D%0A%0D%0A            dotProduct += valueA * valueB;%0D%0A            magnitudeA += valueA * valueA;%0D%0A            magnitudeB += valueB * valueB;%0D%0A        %7D%0D%0A%0D%0A        magnitudeA = Math.sqrt(magnitudeA);%0D%0A        magnitudeB = Math.sqrt(magnitudeB);%0D%0A%0D%0A        if (magnitudeA == 0.0 %7C%7C magnitudeB == 0.0) %7B%0D%0A            return 0.0;%0D%0A        %7D%0D%0A%0D%0A        return dotProduct / (magnitudeA * magnitudeB);%0D%0A    %7D%0D\n %0A%7D%0D%0A\n&quot;,&quot;isNew&quot;:false,&quot;isApplied&quot;:true,&quot;isUnread&quot;:true,&quot;timestamp&quot;:1761855603079}]}],&quot;context&quot;:{&quot;author&quot;:&quot;Code agent&quot;,&quot;operationId&quot;:&quot;3b51ac94-1e21-4409-9bcb-0c574eb5f1db&quot;,&quot;usageStatistics&quot;:{&quot;llmCallsUsedForAnswer&quot;:12.0,&quot;llmCallsUsedTotal&quot;:35.0,&quot;llmCallsLimit&quot;:30.0,&quot;limitRenewalMillisecondTimestamp&quot;:1761940839418}},&quot;createdAt&quot;:1761855528143,&quot;isInternal&quot;:false},{&quot;id&quot;:&quot;a3b8105e-802c-4f5c-ba1a-33dfdd5f0d70&quot;,&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;C:\\Users\\ProBook\\Documents\\Projets IntelliJ IDEA\\AI\\TPs Casablanca\\tp2testkharraz\\src\\main\\java\\ma\\emsi\\kharraz\\Test3.java:4:38&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;java: cannot find symbol&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  symbol:   class EmbeddingMatch&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  location: package dev.langchain4j.data.embedding&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;C:\\Users\\ProBook\\Documents\\Projets IntelliJ IDEA\\AI\\TPs Casablanca\\tp2testkharraz\\src\\main\\java\\ma\\emsi\\kharraz\\Test3.java:5:38&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;java: cannot find symbol&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  symbol:   class EmbeddingMatchResult&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  location: package dev.langchain4j.data.embedding&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;C:\\Users\\ProBook\\Documents\\Projets IntelliJ IDEA\\AI\\TPs Casablanca\\tp2testkharraz\\src\\main\\java\\ma\\emsi\\kharraz\\Test3.java:6:38&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;java: cannot find symbol&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  symbol:   class CosineSimilarity&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  location: package dev.langchain4j.data.embedding&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;C:\\Users\\ProBook\\Documents\\Projets IntelliJ IDEA\\AI\\TPs Casablanca\\tp2testkharraz\\src\\main\\java\\ma\\emsi\\kharraz\\Test3.java:8:39&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;java: cannot find symbol&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  symbol:   class TaskType&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  location: package dev.langchain4j.model.embedding&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;C:\\Users\\ProBook\\Documents\\Projets IntelliJ IDEA\\AI\\TPs Casablanca\\tp2testkharraz\\src\\main\\java\\ma\\emsi\\kharraz\\Test3.java:11:39&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;java: cannot find symbol&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  symbol:   class InMemoryEmbeddingStore&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  location: package dev.langchain4j.store.embedding&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;C:\\Users\\ProBook\\Documents\\Projets IntelliJ IDEA\\AI\\TPs Casablanca\\tp2testkharraz\\src\\main\\java\\ma\\emsi\\kharraz\\Test3.java:43:56&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;java: cannot find symbol&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  symbol:   class InMemoryEmbeddingStore&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  location: class ma.emsi.kharraz.Test3&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;C:\\Users\\ProBook\\Documents\\Projets IntelliJ IDEA\\AI\\TPs Casablanca\\tp2testkharraz\\src\\main\\java\\ma\\emsi\\kharraz\\Test3.java:47:56&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;java: incompatible types: inference variable T has incompatible bounds&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    equality constraints: dev.langchain4j.data.segment.TextSegment&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    lower bounds: java.lang.String&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;C:\\Users\\ProBook\\Documents\\Projets IntelliJ IDEA\\AI\\TPs Casablanca\\tp2testkharraz\\src\\main\\java\\ma\\emsi\\kharraz\\Test3.java:54:39&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;java: cannot find symbol&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  symbol:   variable CosineSimilarity&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  location: class ma.emsi.kharraz.Test3&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;C:\\Users\\ProBook\\Documents\\Projets IntelliJ IDEA\\AI\\TPs Casablanca\\tp2testkharraz\\src\\main\\java\\ma\\emsi\\kharraz\\Test3.java:70:13&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;java: cannot find symbol&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  symbol:   class EmbeddingMatchResult&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  location: class ma.emsi.kharraz.Test3&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;C:\\Users\\ProBook\\Documents\\Projets IntelliJ IDEA\\AI\\TPs Casablanca\\tp2testkharraz\\src\\main\\java\\ma\\emsi\\kharraz\\Test3.java:70:73&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;java: cannot find symbol&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  symbol:   method findRelevant(dev.langchain4j.data.embedding.Embedding,int)&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  location: variable embeddingStore of type dev.langchain4j.store.embedding.EmbeddingStore&lt;dev.langchain4j.data.embedding.Embedding&gt;&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;C:\\Users\\ProBook\\Documents\\Projets IntelliJ IDEA\\AI\\TPs Casablanca\\tp2testkharraz\\src\\main\\java\\ma\\emsi\\kharraz\\Test3.java:73:18&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;java: cannot find symbol&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  symbol:   class EmbeddingMatch&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  location: class ma.emsi.kharraz.Test3&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;corrige les erreurs&quot;}],&quot;context&quot;:{&quot;currentFile&quot;:{&quot;path&quot;:&quot;src/main/java/ma/emsi/kharraz/Test3.java&quot;,&quot;fsPath&quot;:&quot;C:/Users/ProBook/Documents/Projets IntelliJ IDEA/AI/TPs Casablanca/tp2testkharraz/src/main/java/ma/emsi/kharraz/Test3.java&quot;,&quot;sources&quot;:[&quot;opened_tab&quot;],&quot;content&quot;:&quot;package ma.emsi.kharraz;\n\nimport dev.langchain4j.data.embedding.Embedding;\nimport dev.langchain4j.data.embedding.EmbeddingMatch;\nimport dev.langchain4j.data.embedding.EmbeddingMatchResult;\nimport dev.langchain4j.data.embedding.CosineSimilarity;\nimport dev.langchain4j.model.embedding.EmbeddingModel;\nimport dev.langchain4j.model.embedding.TaskType;\nimport dev.langchain4j.model.googleai.GoogleAiEmbeddingModel;\nimport dev.langchain4j.store.embedding.EmbeddingStore;\nimport dev.langchain4j.store.embedding.InMemoryEmbeddingStore;\n\nimport java.time.Duration;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class Test3 {\n\n    private static final String GEMINI_KEY_ENV = \&quot;GEMINI_KEY\&quot;;\n\n    public static void main(String[] args) {\n        String apiKey = System.getenv(GEMINI_KEY_ENV);\n        if (apiKey == null || apiKey.isBlank()) {\n            System.err.println(\&quot;La clé GEMINI_KEY est introuvable dans les variables d'environnement.\&quot;);\n            return;\n        }\n\n        EmbeddingModel embeddingModel = GoogleAiEmbeddingModel.builder()\n                .apiKey(apiKey)\n                .modelName(\&quot;text-embedding-004\&quot;)\n                .taskType(GoogleAiEmbeddingModel.TaskType.SEMANTIC_SIMILARITY)\n                .outputDimensionality(300)\n                .timeout(Duration.ofMillis(100))\n                .build();\n\n        List&lt;String[]&gt; sentencePairs = Arrays.asList(\n                new String[]{\&quot;Les chats aiment dormir au soleil.\&quot;, \&quot;Les félins apprécient se prélasser dans la lumière.\&quot;},\n                new String[]{\&quot;Je vais acheter du pain à la boulangerie.\&quot;, \&quot;Je suis en retard pour la réunion.\&quot;},\n                new String[]{\&quot;Le ciel est bleu aujourd'hui.\&quot;, \&quot;Aujourd'hui, le ciel paraît dégagé et azur.\&quot;},\n                new String[]{\&quot;Il pleut beaucoup dans cette région.\&quot;, \&quot;Cette région est très ensoleillée.\&quot;}\n        );\n\n        EmbeddingStore&lt;Embedding&gt; embeddingStore = new InMemoryEmbeddingStore&lt;&gt;();\n\n        for (int i = 0; i &lt; sentencePairs.size(); i++) {\n            String[] pair = sentencePairs.get(i);\n            List&lt;Embedding&gt; embeddings = embeddingModel.embedAll(Arrays.asList(pair[0], pair[1])).content();\n            Embedding firstEmbedding = embeddings.get(0);\n            Embedding secondEmbedding = embeddings.get(1);\n\n            embeddingStore.add(firstEmbedding);\n            embeddingStore.add(secondEmbedding);\n\n            double cosineSimilarity = CosineSimilarity.between(firstEmbedding, secondEmbedding);\n\n            System.out.printf(\&quot;Paire %d:%n\&quot;, i + 1);\n            System.out.printf(\&quot;\\tPhrase A: %s%n\&quot;, pair[0]);\n            System.out.printf(\&quot;\\tPhrase B: %s%n\&quot;, pair[1]);\n            System.out.printf(\&quot;\\tSimilarité cosinus: %.4f%n%n\&quot;, cosineSimilarity);\n        }\n\n        List&lt;String&gt; queries = Arrays.asList(\n                \&quot;Les chats aiment la chaleur du soleil\&quot;,\n                \&quot;Il faut que je me dépêche pour la réunion\&quot;,\n                \&quot;Le temps est vraiment couvert aujourd'hui\&quot;\n        );\n\n        for (String query : queries) {\n            Embedding queryEmbedding = embeddingModel.embed(query).content();\n            EmbeddingMatchResult&lt;Embedding&gt; matchResult = embeddingStore.findRelevant(queryEmbedding, 2);\n\n            System.out.printf(\&quot;Requête: %s%n\&quot;, query);\n            for (EmbeddingMatch&lt;Embedding&gt; match : matchResult.matches()) {\n                System.out.printf(\&quot;\\tSimilarité: %.4f%n\&quot;, match.score());\n            }\n            System.out.println();\n        }\n    }\n}\n&quot;,&quot;language&quot;:&quot;java&quot;},&quot;codebaseEnabled&quot;:true},&quot;createdAt&quot;:1761855738571,&quot;isInternal&quot;:false,&quot;rawContent&quot;:{&quot;type&quot;:&quot;doc&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;C:\\Users\\ProBook\\Documents\\Projets IntelliJ IDEA\\AI\\TPs Casablanca\\tp2testkharraz\\src\\main\\java\\ma\\emsi\\kharraz\\Test3.java:4:38&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;java: cannot find symbol&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  symbol:   class EmbeddingMatch&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  location: package dev.langchain4j.data.embedding&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;C:\\Users\\ProBook\\Documents\\Projets IntelliJ IDEA\\AI\\TPs Casablanca\\tp2testkharraz\\src\\main\\java\\ma\\emsi\\kharraz\\Test3.java:5:38&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;java: cannot find symbol&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  symbol:   class EmbeddingMatchResult&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  location: package dev.langchain4j.data.embedding&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;C:\\Users\\ProBook\\Documents\\Projets IntelliJ IDEA\\AI\\TPs Casablanca\\tp2testkharraz\\src\\main\\java\\ma\\emsi\\kharraz\\Test3.java:6:38&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;java: cannot find symbol&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  symbol:   class CosineSimilarity&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  location: package dev.langchain4j.data.embedding&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;C:\\Users\\ProBook\\Documents\\Projets IntelliJ IDEA\\AI\\TPs Casablanca\\tp2testkharraz\\src\\main\\java\\ma\\emsi\\kharraz\\Test3.java:8:39&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;java: cannot find symbol&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  symbol:   class TaskType&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  location: package dev.langchain4j.model.embedding&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;C:\\Users\\ProBook\\Documents\\Projets IntelliJ IDEA\\AI\\TPs Casablanca\\tp2testkharraz\\src\\main\\java\\ma\\emsi\\kharraz\\Test3.java:11:39&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;java: cannot find symbol&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  symbol:   class InMemoryEmbeddingStore&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  location: package dev.langchain4j.store.embedding&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;C:\\Users\\ProBook\\Documents\\Projets IntelliJ IDEA\\AI\\TPs Casablanca\\tp2testkharraz\\src\\main\\java\\ma\\emsi\\kharraz\\Test3.java:43:56&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;java: cannot find symbol&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  symbol:   class InMemoryEmbeddingStore&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  location: class ma.emsi.kharraz.Test3&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;C:\\Users\\ProBook\\Documents\\Projets IntelliJ IDEA\\AI\\TPs Casablanca\\tp2testkharraz\\src\\main\\java\\ma\\emsi\\kharraz\\Test3.java:47:56&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;java: incompatible types: inference variable T has incompatible bounds&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    equality constraints: dev.langchain4j.data.segment.TextSegment&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;    lower bounds: java.lang.String&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;C:\\Users\\ProBook\\Documents\\Projets IntelliJ IDEA\\AI\\TPs Casablanca\\tp2testkharraz\\src\\main\\java\\ma\\emsi\\kharraz\\Test3.java:54:39&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;java: cannot find symbol&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  symbol:   variable CosineSimilarity&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  location: class ma.emsi.kharraz.Test3&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;C:\\Users\\ProBook\\Documents\\Projets IntelliJ IDEA\\AI\\TPs Casablanca\\tp2testkharraz\\src\\main\\java\\ma\\emsi\\kharraz\\Test3.java:70:13&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;java: cannot find symbol&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  symbol:   class EmbeddingMatchResult&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  location: class ma.emsi.kharraz.Test3&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;C:\\Users\\ProBook\\Documents\\Projets IntelliJ IDEA\\AI\\TPs Casablanca\\tp2testkharraz\\src\\main\\java\\ma\\emsi\\kharraz\\Test3.java:70:73&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;java: cannot find symbol&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  symbol:   method findRelevant(dev.langchain4j.data.embedding.Embedding,int)&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  location: variable embeddingStore of type dev.langchain4j.store.embedding.EmbeddingStore&lt;dev.langchain4j.data.embedding.Embedding&gt;&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;C:\\Users\\ProBook\\Documents\\Projets IntelliJ IDEA\\AI\\TPs Casablanca\\tp2testkharraz\\src\\main\\java\\ma\\emsi\\kharraz\\Test3.java:73:18&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;java: cannot find symbol&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  symbol:   class EmbeddingMatch&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;  location: class ma.emsi.kharraz.Test3&quot;}]},{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;corrige les erreurs&quot;}]}]},&quot;autoAppliedRules&quot;:[]},{&quot;id&quot;:&quot;dcc549a0-ce0d-4c41-a580-1bfc62092541&quot;,&quot;role&quot;:&quot;system&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;errorText&quot;,&quot;text&quot;:&quot;Rate limit exceeded. You can try again on October 31 at 21:00.&quot;,&quot;actions&quot;:[{&quot;type&quot;:&quot;upgradePlan&quot;,&quot;waitSeconds&quot;:85099},{&quot;type&quot;:&quot;externalAction&quot;,&quot;title&quot;:&quot;Regenerate&quot;,&quot;action&quot;:&quot;regenerateLastAnswer&quot;}]}],&quot;createdAt&quot;:1761855740045,&quot;isInternal&quot;:false}],&quot;isAgent&quot;:true,&quot;isNameGenerated&quot;:true,&quot;isCustomAgent&quot;:false,&quot;isUnitTestsAgent&quot;:false,&quot;isE2EAgent&quot;:false,&quot;isQnaAgent&quot;:false,&quot;isRepoInfoAgent&quot;:false,&quot;isClaudeCode&quot;:false,&quot;isZencoderCli&quot;:false,&quot;autoApply&quot;:true,&quot;model&quot;:&quot;default&quot;},&quot;5ad8bd0c-f01e-47cb-87f9-5ceaa216049f&quot;:{&quot;id&quot;:&quot;5ad8bd0c-f01e-47cb-87f9-5ceaa216049f&quot;,&quot;createdAt&quot;:1761840601011,&quot;updatedAt&quot;:1761840601016,&quot;title&quot;:&quot;/explain &lt;artifactId&gt;slf4j-simple&lt;/artifactId&gt; ...&quot;,&quot;messages&quot;:[{&quot;id&quot;:&quot;aebda2f4-69bd-47c3-be34-4c5f0e2ad793&quot;,&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;command&quot;,&quot;commandName&quot;:&quot;explain&quot;},{&quot;type&quot;:&quot;codeSnippet&quot;,&quot;text&quot;:&quot;&lt;artifactId&gt;slf4j-simple&lt;/artifactId&gt;&quot;,&quot;language&quot;:&quot;xml&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Dependency 'org.slf4j:slf4j-simple:2.0.17' not found&quot;}],&quot;context&quot;:{&quot;currentFile&quot;:{&quot;path&quot;:&quot;C:\\Users\\ProBook\\Documents\\Projets IntelliJ IDEA\\AI\\TPs Casablanca\\tp2testkharraz\\pom.xml&quot;,&quot;fsPath&quot;:&quot;C:/Users/ProBook/Documents/Projets IntelliJ IDEA/AI/TPs Casablanca/tp2testkharraz/pom.xml&quot;,&quot;content&quot;:&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&lt;project xmlns=\&quot;http://maven.apache.org/POM/4.0.0\&quot;\n         xmlns:xsi=\&quot;http://www.w3.org/2001/XMLSchema-instance\&quot;\n         xsi:schemaLocation=\&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\&quot;&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n\n    &lt;groupId&gt;ma.emsi.kharraz&lt;/groupId&gt;\n    &lt;artifactId&gt;tp2testkharraz&lt;/artifactId&gt;\n    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n\n    &lt;properties&gt;\n        &lt;maven.compiler.source&gt;21&lt;/maven.compiler.source&gt;\n        &lt;maven.compiler.target&gt;21&lt;/maven.compiler.target&gt;\n        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;\n    &lt;/properties&gt;\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;dev.langchain4j&lt;/groupId&gt;\n            &lt;artifactId&gt;langchain4j&lt;/artifactId&gt;\n            &lt;version&gt;1.5.0&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;dev.langchain4j&lt;/groupId&gt;\n            &lt;artifactId&gt;langchain4j-google-ai-gemini&lt;/artifactId&gt;\n            &lt;version&gt;1.5.0&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;\n            &lt;artifactId&gt;slf4j-simple&lt;/artifactId&gt;\n            &lt;version&gt;2.0.17&lt;/version&gt;\n        &lt;/dependency&gt;\n\n    &lt;/dependencies&gt;\n\n&lt;/project&gt;&quot;,&quot;language&quot;:&quot;xml&quot;},&quot;codebaseEnabled&quot;:true},&quot;createdAt&quot;:1761840601016,&quot;isInternal&quot;:false,&quot;rawContent&quot;:{&quot;type&quot;:&quot;doc&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;command&quot;,&quot;attrs&quot;:{&quot;label&quot;:&quot;explain&quot;},&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;explain: &quot;}]},{&quot;type&quot;:&quot;codeBlock&quot;,&quot;attrs&quot;:{&quot;language&quot;:&quot;xml&quot;},&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;&lt;artifactId&gt;slf4j-simple&lt;/artifactId&gt;&quot;}]},{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Dependency 'org.slf4j:slf4j-simple:2.0.17' not found&quot;}]}]},&quot;autoAppliedRules&quot;:[]}],&quot;isAgent&quot;:false,&quot;isCustomAgent&quot;:false,&quot;isUnitTestsAgent&quot;:false,&quot;isE2EAgent&quot;:false,&quot;isQnaAgent&quot;:false,&quot;isRepoInfoAgent&quot;:false}}" />
  </component>
</project>